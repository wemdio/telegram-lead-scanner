const puppeteer = require('puppeteer');

async function checkFrontendLocalStorage() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
  
  let browser;
  try {
    browser = await puppeteer.launch({ 
      headless: false,
      defaultViewport: null,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await page.goto('http://localhost:3000', { 
      waitUntil: 'networkidle0',
      timeout: 10000 
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(2000);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const localStorageData = await page.evaluate(() => {
      const storage = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        storage[key] = localStorage.getItem(key);
      }
      return storage;
    });
    
    console.log('\nüíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage:');
    Object.keys(localStorageData).forEach(key => {
      const value = localStorageData[key];
      if (key.toLowerCase().includes('google') || key.toLowerCase().includes('sheet')) {
        console.log(`üîë ${key}:`, value ? (value.length > 100 ? value.substring(0, 100) + '...' : value) : '–ø—É—Å—Ç–æ');
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è Google Sheets
    const googleKeys = [
      'googleServiceAccountEmail',
      'googlePrivateKey', 
      'googleSpreadsheetId'
    ];
    
    console.log('\nüîç –ü–æ–∏—Å–∫ Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
    let foundSettings = false;
    
    googleKeys.forEach(key => {
      const value = localStorageData[key];
      if (value) {
        foundSettings = true;
        console.log(`‚úÖ ${key}:`, value.length > 50 ? value.substring(0, 50) + '...' : value);
      } else {
        console.log(`‚ùå ${key}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
    
    if (!foundSettings) {
      console.log('\n‚ùå Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage!');
      console.log('üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É backend –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á');
    } else {
      console.log('\n‚úÖ Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Google Sheets –Ω–∞ backend
      console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Google Sheets –Ω–∞ backend...');
      
      const initResult = await page.evaluate(async () => {
        try {
          const googleServiceAccountEmail = localStorage.getItem('googleServiceAccountEmail');
          const googlePrivateKey = localStorage.getItem('googlePrivateKey');
          const googleSpreadsheetId = localStorage.getItem('googleSpreadsheetId');
          
          if (!googleServiceAccountEmail || !googlePrivateKey) {
            return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç credentials –≤ localStorage' };
          }
          
          const response = await fetch('http://localhost:3001/api/sheets/auto-initialize', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              googleServiceAccountEmail,
              googlePrivateKey,
              googleSpreadsheetId
            })
          });
          
          const result = await response.json();
          return result;
        } catch (error) {
          return { success: false, error: error.message };
        }
      });
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initResult);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      browser.close();
    }, 5000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ localStorage:', error);
    if (browser) {
      await browser.close();
    }
  }
}

checkFrontendLocalStorage();