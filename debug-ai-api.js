// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js

async function debugAIAPI() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ò–ò API...');

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsResponse = await fetch('http://localhost:3001/api/scanner/status');
    const settings = await settingsResponse.json();
    
    const openrouterApiKey = settings.status.openrouterApiKey;
    const leadCriteria = settings.status.leadCriteria;
    
    console.log('üîë API –∫–ª—é—á:', openrouterApiKey ? `${openrouterApiKey.substring(0, 20)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏:', leadCriteria ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');

    // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—á–µ–Ω—å —è–≤–Ω—ã–π –ª–∏–¥
    const testMessage = {
      id: 1,
      username: 'test_user',
      text: '–ò—â—É –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞. –ë—é–¥–∂–µ—Ç 100 000 —Ä—É–±–ª–µ–π. –ü–∏—à–∏—Ç–µ @test_user',
      date: new Date().toISOString(),
      chat_id: 'test_chat'
    };

    console.log('üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', testMessage.text);

    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
    console.log('\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API...');
    
    const openrouterResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openrouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'http://localhost:3001',
        'X-Title': 'Telegram Lead Scanner'
      },
      body: JSON.stringify({
        model: 'meta-llama/llama-3.1-8b-instruct',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ª–∏–¥–æ–≤).

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤:
${leadCriteria}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "isLead": true/false,
  "confidence": 0-100,
  "reason": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "leadInfo": {
    "service": "–∫–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞",
    "budget": "–±—é–¥–∂–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω",
    "contact": "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å",
    "urgency": "—Å—Ä–æ—á–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞"
  }
}`
          },
          {
            role: 'user',
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage.text}"`
          }
        ],
        temperature: 0.1,
        max_tokens: 500
      })
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ OpenRouter:', openrouterResponse.status);
    
    if (!openrouterResponse.ok) {
      const errorText = await openrouterResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ OpenRouter:', errorText);
      return;
    }

    const openrouterResult = await openrouterResponse.json();
    console.log('ü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç OpenRouter:', JSON.stringify(openrouterResult, null, 2));

    if (openrouterResult.choices && openrouterResult.choices[0]) {
      const aiResponse = openrouterResult.choices[0].message.content;
      console.log('\nüí¨ –û—Ç–≤–µ—Ç –ò–ò:', aiResponse);
      
      try {
        const parsedResponse = JSON.parse(aiResponse);
        console.log('\n‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(parsedResponse, null, 2));
        
        if (parsedResponse.isLead) {
          console.log('üéØ –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ –ª–∏–¥!');
        } else {
          console.log('‚ùå –ò–ò –ù–ï –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ –ª–∏–¥');
        }
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –ò–ò:', parseError.message);
        console.log('üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', aiResponse);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ò–ò API:', error);
  }
}

debugAIAPI();