// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js 18+

async function testFrontendRequest() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
  
  // –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  const requestData = {
    scanInterval: 1,
    selectedChats: [
      "-1001611947303", // –ü—Ä–∏–º–µ—Ä –¥–ª–∏–Ω–Ω–æ–≥–æ ID –∏–∑ –ª–æ–≥–æ–≤
      "-1001234567890", // –î–æ–±–∞–≤–∏–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞
      "-1001987654321",
      "-1001555666777"
    ],
    telegramConfig: {
      apiId: 12345678,
      apiHash: "test_api_hash_example_string",
      sessionString: "1BVtsOLwABpyi-FdVQABCNbwU_test_session_string_example_very_long_string_that_might_cause_issues_with_request_size_and_parsing_in_backend_server_processing_logic_and_validation_routines_that_check_for_proper_format_and_length_constraints_in_telegram_api_integration_modules_and_authentication_handlers_that_process_user_credentials_and_session_management_functionality_for_secure_communication_with_telegram_servers_and_api_endpoints_that_require_proper_authorization_tokens_and_session_identifiers_for_accessing_chat_data_and_message_history_from_selected_telegram_channels_and_groups_specified_by_user_in_application_settings_configuration_panel_interface_components"
    },
    sheetsConfig: {
      serviceAccountEmail: "test@example.com",
      privateKey: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB\nwxFnOGpCGFYjVGVs2+7YGWdGF4g5J0ByoDHCANwjnP4X9wdpukrpotFr7dy9qB\nUrMxjzrW221b+Yg8lgIrJ1oduHSBINeSp7RizHRzLrRwN7bgLs/9up4S1cjKs2\nBLIyHVd9lqdNdAaM1SuoSiQgNQQn2w\n-----END PRIVATE KEY-----"
    },
    spreadsheetId: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms",
    leadAnalysisSettings: {
      openrouterApiKey: "sk-or-v1-test-key-example-very-long-api-key-string-that-might-be-causing-issues-with-request-parsing-or-validation-in-backend-server-processing-logic-and-authentication-handlers-that-check-for-proper-api-key-format-and-length-constraints-in-openrouter-integration-modules-and-ai-analysis-functionality-for-lead-detection-and-classification-algorithms-that-process-telegram-messages-and-extract-relevant-information-about-potential-leads-based-on-user-defined-criteria-and-filtering-rules-specified-in-application-configuration-settings-panel-interface-components-and-lead-analysis-parameters-that-determine-how-ai-models-should-evaluate-and-categorize-incoming-messages-from-selected-telegram-channels-and-groups-for_automated_lead_generation_and_tracking_workflows",
      leadCriteria: "–ª—é–±—ã–µ –ª–∏–¥—ã"
    }
  };

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ http://localhost:3001/api/scanner/start');
    console.log('üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(requestData).length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    const response = await fetch('http://localhost:3001/api/scanner/start', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData)
    });

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üì• Headers:', Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log('üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseText);
    
    if (response.ok) {
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.status, responseText);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

testFrontendRequest();