const fs = require('fs');

async function debugMessagesAndLeads() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª–∏–¥–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend —Å–µ—Ä–≤–µ—Ä–∞...');
    const backendResponse = await fetch('http://localhost:3002/api/scanner/status');
    if (backendResponse.ok) {
      const status = await backendResponse.json();
      console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω:', status.isRunning);
      console.log('   AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
        hasOpenRouterKey: !!status.openrouterApiKey,
        hasLeadCriteria: !!status.leadCriteria
      });
    } else {
      console.log('‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
    const sheetsSettingsResponse = await fetch('http://localhost:3002/api/settings/google-sheets');
    if (sheetsSettingsResponse.ok) {
      const sheetsSettings = await sheetsSettingsResponse.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   Spreadsheet ID:', sheetsSettings.spreadsheetId);
    } else {
      console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–°–æ–æ–±—â–µ–Ω–∏—è"
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç "–°–æ–æ–±—â–µ–Ω–∏—è"...');
    try {
      const messagesResponse = await fetch('http://localhost:3002/api/sheets/data?range=–°–æ–æ–±—â–µ–Ω–∏—è!A:Z');
      if (messagesResponse.ok) {
        const messagesData = await messagesResponse.json();
        if (messagesData.success && messagesData.data) {
          console.log('‚úÖ –õ–∏—Å—Ç "–°–æ–æ–±—â–µ–Ω–∏—è" –Ω–∞–π–¥–µ–Ω');
          console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', messagesData.data.length);
          if (messagesData.data.length > 1) {
            console.log('   –ó–∞–≥–æ–ª–æ–≤–∫–∏:', messagesData.data[0]);
            console.log('   –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:', messagesData.data[1]);
          }
        } else {
          console.log('‚ùå –õ–∏—Å—Ç "–°–æ–æ–±—â–µ–Ω–∏—è" –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–°–æ–æ–±—â–µ–Ω–∏—è"');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–õ–∏–¥—ã"
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç "–õ–∏–¥—ã"...');
    try {
      const leadsResponse = await fetch('http://localhost:3002/api/sheets/data?range=–õ–∏–¥—ã!A:Z');
      if (leadsResponse.ok) {
        const leadsData = await leadsResponse.json();
        if (leadsData.success && leadsData.data) {
          console.log('‚úÖ –õ–∏—Å—Ç "–õ–∏–¥—ã" –Ω–∞–π–¥–µ–Ω');
          console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', leadsData.data.length);
          if (leadsData.data.length > 1) {
            console.log('   –ó–∞–≥–æ–ª–æ–≤–∫–∏:', leadsData.data[0]);
            console.log('   –ü—Ä–∏–º–µ—Ä –ª–∏–¥–∞:', leadsData.data[1]);
          } else {
            console.log('   ‚ö†Ô∏è –õ–∏—Å—Ç "–õ–∏–¥—ã" —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç');
          }
        } else {
          console.log('‚ùå –õ–∏—Å—Ç "–õ–∏–¥—ã" –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–õ–∏–¥—ã"');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤:', error.message);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤...');
    try {
      const testAnalysisResponse = await fetch('http://localhost:3002/api/leads/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          openrouterApiKey: 'test-key',
          criteria: '–ù–∞–π—Ç–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É—Å–ª—É–≥–∏',
          messages: [
            {
              id: 'test1',
              text: '–ò—â—É —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –æ–ø—ã—Ç 3 –≥–æ–¥–∞',
              author: 'TestUser1',
              date: new Date().toISOString(),
              chatTitle: 'TestChat'
            },
            {
              id: 'test2', 
              text: '–ü—Ä–æ–¥–∞—é –º–∞—à–∏–Ω—É, –Ω–µ–¥–æ—Ä–æ–≥–æ',
              author: 'TestUser2',
              date: new Date().toISOString(),
              chatTitle: 'TestChat'
            }
          ]
        })
      });

      if (testAnalysisResponse.ok) {
        const analysisResult = await testAnalysisResponse.json();
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('   –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤:', analysisResult.leads ? analysisResult.leads.length : 0);
        if (analysisResult.leads && analysisResult.leads.length > 0) {
          console.log('   –ü—Ä–∏–º–µ—Ä –ª–∏–¥–∞:', analysisResult.leads[0]);
        }
      } else {
        const errorText = await testAnalysisResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–æ–≤:', errorText);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...');
    try {
      const historyResponse = await fetch('http://localhost:3002/api/scanner/history');
      if (historyResponse.ok) {
        const history = await historyResponse.json();
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞');
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:', history.slice(-3));
      } else {
        console.log('‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

debugMessagesAndLeads().catch(console.error);