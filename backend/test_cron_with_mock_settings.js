const axios = require('axios');

async function testCronWithMockSettings() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º cron –∑–∞–¥–∞—á—É —Å mock –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Google Sheets...\n');

  try {
    // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    console.log('1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
    const mockGoogleSettings = {
      serviceAccountEmail: 'mock-service@mock.iam.gserviceaccount.com',
      privateKey: '-----BEGIN PRIVATE KEY-----\nMOCK_PRIVATE_KEY\n-----END PRIVATE KEY-----',
      spreadsheetId: 'mock_spreadsheet_id_12345'
    };

    const googleSettingsResponse = await axios.post('http://localhost:3001/api/settings/google-sheets', mockGoogleSettings);
    console.log('Mock Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', googleSettingsResponse.data);

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
    const mockTelegramSettings = {
      telegramBotToken: 'mock_bot_token_12345',
      telegramChannelId: 'mock_channel_id_67890'
    };

    const telegramSettingsResponse = await axios.post('http://localhost:3001/api/settings/telegram', mockTelegramSettings);
    console.log('Mock Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', telegramSettingsResponse.data);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads || [];
    console.log(`–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads.length}`);
    
    const unsentLeads = leads.filter(lead => !lead.sent);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${unsentLeads.length}`);

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É
    console.log('\n4. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç cron –∑–∞–¥–∞—á–∏:', cronResponse.data);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–¥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    const leadsAfter = leadsAfterResponse.data.leads || [];
    
    const sentLeadsAfter = leadsAfter.filter(lead => lead.sent === true);
    const unsentLeadsAfter = leadsAfter.filter(lead => !lead.sent);
    
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${sentLeadsAfter.length}`);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${unsentLeadsAfter.length}`);

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

testCronWithMockSettings();