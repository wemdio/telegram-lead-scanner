const axios = require('axios');

async function checkTelegramConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
    console.log('1Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:');
    const telegramStatus = await axios.get('http://localhost:3001/api/telegram/status');
    console.log(`   –ü–æ–¥–∫–ª—é—á–µ–Ω: ${telegramStatus.data.connected ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${telegramStatus.data.authorized ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ${telegramStatus.data.sessionActive ? '–î–∞' : '–ù–µ—Ç'}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
    console.log('\n2Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:');
    try {
      const chatsResponse = await axios.get('http://localhost:3001/api/telegram/chats');
      const chats = chatsResponse.data.chats || [];
      console.log(`   –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${chats.length}`);
      
      if (chats.length > 0) {
        console.log('   –ü–µ—Ä–≤—ã–µ 5 —á–∞—Ç–æ–≤:');
        chats.slice(0, 5).forEach((chat, index) => {
          console.log(`     ${index + 1}. ${chat.title || chat.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: ${chat.id})`);
        });
      } else {
        console.log('   ‚ö†Ô∏è –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (chatsError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: ${chatsError.message}`);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:');
    try {
      const chatsResponse = await axios.get('http://localhost:3001/api/telegram/chats');
      const chats = chatsResponse.data.chats || [];
      
      if (chats.length > 0) {
        const firstChat = chats[0];
        console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç: ${firstChat.title || firstChat.name} (ID: ${firstChat.id})`);
        
        const messagesResponse = await axios.post('http://localhost:3001/api/telegram/messages', {
          chatId: firstChat.id,
          limit: 10
        });
        
        const messages = messagesResponse.data.messages || [];
        console.log(`   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
        
        if (messages.length > 0) {
          console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:');
          messages.slice(0, 3).forEach((msg, index) => {
            const date = new Date(msg.date * 1000).toLocaleString('ru-RU');
            const text = msg.message ? msg.message.substring(0, 50) + '...' : '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
            console.log(`     ${index + 1}. ${date}: ${text}`);
          });
        } else {
          console.log('   ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } else {
        console.log('   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    } catch (messagesError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${messagesError.message}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
    const cronStatus = await axios.get('http://localhost:3001/api/cron/status');
    console.log(`   Cron –∞–∫—Ç–∏–≤–µ–Ω: ${cronStatus.data.active ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${cronStatus.data.interval || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${cronStatus.data.nextRun || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∫–∞–Ω–µ—Ä–∞
    console.log('\n5Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:');
    const scanHistory = await axios.get('http://localhost:3001/api/scanner/history');
    const history = scanHistory.data.history || [];
    
    if (history.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:');
      history.slice(-5).forEach((scan, index) => {
        const date = new Date(scan.timestamp).toLocaleString('ru-RU');
        console.log(`     ${index + 1}. ${date}: ${scan.messagesProcessed || 0} —Å–æ–æ–±—â–µ–Ω–∏–π, ${scan.leadsFound || 0} –ª–∏–¥–æ–≤`);
        if (scan.error) {
          console.log(`        ‚ùå –û—à–∏–±–∫–∞: ${scan.error}`);
        }
      });
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

checkTelegramConnection();