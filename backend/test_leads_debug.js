const axios = require('axios');

async function debugLeadsRetrieval() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ Google Sheets...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
    try {
      const settingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
      console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets:', settingsResponse.data);
      
      if (settingsResponse.data.success && settingsResponse.data.spreadsheetId) {
        const spreadsheetId = settingsResponse.data.spreadsheetId;
        console.log(`‚úÖ SpreadsheetId –Ω–∞–π–¥–µ–Ω: ${spreadsheetId}`);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets
        console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets...');
        const leadsResponse = await axios.get(`http://localhost:3001/api/sheets/leads/${spreadsheetId}`);
        console.log('üìã –û—Ç–≤–µ—Ç API –ª–∏–¥–æ–≤:', JSON.stringify(leadsResponse.data, null, 2));
        
        const leads = leadsResponse.data.leads;
        console.log(`üìä –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads ? leads.length : 'undefined'}`);
        
        if (leads && leads.length > 0) {
          console.log('\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤:');
          leads.forEach((lead, index) => {
            console.log(`–õ–∏–¥ ${index + 1}:`, {
              name: lead.name,
              channel: lead.channel,
              timestamp: lead.timestamp,
              sent: lead.sent,
              sentType: typeof lead.sent
            });
          });
          
          // 4. –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
          console.log('\n4Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤...');
          const newLeads = leads.filter(lead => lead.sent !== true);
          console.log(`üîç –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${newLeads.length}`);
          
          if (newLeads.length > 0) {
            console.log('üìã –ü–µ—Ä–≤—ã–π –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥:', JSON.stringify(newLeads[0], null, 2));
          }
        } else {
          console.log('‚ùå –õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π');
        }
        
      } else {
        console.log('‚ùå SpreadsheetId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    if (error.response) {
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

debugLeadsRetrieval();