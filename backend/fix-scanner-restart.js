const fs = require('fs');
const path = require('path');

async function fixScannerRestart() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Å–∫–∞–Ω–µ—Ä–æ–º...\n');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ persistent-settings.json
    const settingsPath = path.join(__dirname, 'persistent-settings.json');
    const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
    
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log(`  - OpenRouter API –∫–ª—é—á: ${!!settings.openrouterApiKey}`);
    console.log(`  - –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏–¥–æ–≤: ${!!settings.leadCriteria}`);
    console.log(`  - Spreadsheet ID: ${!!settings.spreadsheetId}`);
    console.log(`  - Sheets Config: ${!!settings.sheetsConfig}\n`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä...');
    const stopResponse = await fetch('http://localhost:3001/api/scanner/stop', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (stopResponse.ok) {
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', await stopResponse.text());
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...');
    
    const startData = {
      scanInterval: '1h',
      selectedChats: ['@leadscanner_test'],
      telegramConfig: settings.telegramConfig || {},
      sheetsConfig: settings.sheetsConfig,
      spreadsheetId: settings.spreadsheetId,
      leadAnalysisSettings: {
        openrouterApiKey: settings.openrouterApiKey,
        leadCriteria: settings.leadCriteria
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:', {
      scanInterval: startData.scanInterval,
      selectedChats: startData.selectedChats,
      hasTelegramConfig: !!startData.telegramConfig,
      hasSheetsConfig: !!startData.sheetsConfig,
      hasSpreadsheetId: !!startData.spreadsheetId,
      hasOpenrouterApiKey: !!startData.leadAnalysisSettings.openrouterApiKey,
      hasLeadCriteria: !!startData.leadAnalysisSettings.leadCriteria
    });
    
    const startResponse = await fetch('http://localhost:3001/api/scanner/start', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(startData)
    });
    
    if (startResponse.ok) {
      const result = await startResponse.json();
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω:', result);
    } else {
      const errorText = await startResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', errorText);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
    const status = await statusResponse.json();
    
    console.log('üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:');
    console.log(`  - –†–∞–±–æ—Ç–∞–µ—Ç: ${status.isRunning}`);
    console.log(`  - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω: ${status.lastScan}`);
    console.log(`  - –°–ª–µ–¥—É—é—â–∏–π —Å–∫–∞–Ω: ${status.nextScan}`);
    console.log(`  - –í—Å–µ–≥–æ —Å–∫–∞–Ω–æ–≤: ${status.totalScans}`);
    console.log(`  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${status.totalMessages}`);
    console.log(`  - OpenRouter API –∫–ª—é—á: ${!!status.openrouterApiKey}`);
    console.log(`  - –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏–¥–æ–≤: ${!!status.leadCriteria}`);
    
    if (status.isRunning) {
      console.log('\n‚úÖ –°–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üîÑ setTimeout –¥–ª—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∞');
      console.log('‚è∞ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞–Ω–∞');
    } else {
      console.log('\n‚ùå –°–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞:', error);
  }
}

fixScannerRestart();