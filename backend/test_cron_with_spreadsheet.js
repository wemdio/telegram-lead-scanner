const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function testCronWithSpreadsheet() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ cron job —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º spreadsheetId...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get(`${BASE_URL}/leads`);
    const systemLeads = leadsResponse.data.leads || [];
    console.log(`üìä –õ–∏–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${systemLeads.length}`);
    
    if (systemLeads.length > 0) {
      console.log('üìã –ü–µ—Ä–≤—ã–π –ª–∏–¥ –≤ —Å–∏—Å—Ç–µ–º–µ:', JSON.stringify(systemLeads[0], null, 2));
    }

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π spreadsheetId
    console.log('\n2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π spreadsheetId...');
    const testSpreadsheetId = 'test-spreadsheet-123';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    const sheetsSettings = {
      serviceAccountEmail: 'test@example.com',
      privateKey: 'test-private-key',
      spreadsheetId: testSpreadsheetId
    };
    
    try {
      const saveSettingsResponse = await axios.post(`${BASE_URL}/settings/google-sheets`, sheetsSettings);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets:', error.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ mock —Ä–µ–∂–∏–º–µ)
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets...');
    try {
      const sheetsLeadsResponse = await axios.get(`${BASE_URL}/sheets/leads/${testSpreadsheetId}`);
      console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç Google Sheets API:', JSON.stringify(sheetsLeadsResponse.data, null, 2));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ Google Sheets:', error.message);
      if (error.response) {
        console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
      }
    }

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º cron job
    console.log('\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º cron job...');
    const cronResponse = await axios.post(`${BASE_URL}/cron/send-new-leads`);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç cron job:', JSON.stringify(cronResponse.data, null, 2));

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron job
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron job...');
    const leadsAfterResponse = await axios.get(`${BASE_URL}/leads`);
    const leadsAfter = leadsAfterResponse.data.leads || [];
    console.log(`üìä –õ–∏–¥–æ–≤ –ø–æ—Å–ª–µ cron: ${leadsAfter.length}`);
    
    if (leadsAfter.length > 0) {
      console.log('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤:');
      leadsAfter.forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name || lead.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent || false}`);
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    if (error.response) {
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

testCronWithSpreadsheet();