const axios = require('axios');

async function testCronWithTelegramSettings() {
  console.log('üß™ –¢–µ—Å—Ç cron –∑–∞–¥–∞—á–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
    const settingsResponse = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:', {
      botToken: settingsResponse.data.botToken ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      channelId: settingsResponse.data.channelId || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    });
    
    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!settingsResponse.data.botToken || !settingsResponse.data.channelId) {
      console.log('\n2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
      const updateResponse = await axios.post('http://localhost:3001/api/settings/telegram', {
        telegramBotToken: 'test_bot_token_123',
        telegramChannelId: 'test_channel_id_456'
      });
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', updateResponse.data);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads;
    console.log(`–õ–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ: ${leads ? leads.length : 0}`);
    
    if (leads && leads.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 3 –ª–∏–¥–∞:');
      leads.slice(0, 3).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name || 'undefined'} - ${lead.message ? lead.message.substring(0, 50) + '...' : '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'} (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent})`);
      });
    }
    
    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É
    console.log('\n4. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç cron –∑–∞–¥–∞—á–∏:', JSON.stringify(cronResponse.data, null, 2));
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    const leadsAfter = leadsAfterResponse.data.leads;
    console.log(`–õ–∏–¥—ã –ø–æ—Å–ª–µ cron: ${leadsAfter ? leadsAfter.length : 0}`);
    
    if (leadsAfter && leadsAfter.length > 0) {
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤:');
      leadsAfter.forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name || 'undefined'} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent}`);
      });
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

testCronWithTelegramSettings();