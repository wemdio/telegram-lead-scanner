const axios = require('axios');

function checkForDuplicateLeads(newLeads) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ª–∏–¥–æ–≤...');
  
  const uniqueLeads = [];
  const duplicates = [];
  const seenLeads = new Set();
  
  for (const lead of newLeads) {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ª–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const leadKey = `${lead.name || 'unknown'}_${(lead.message || '').substring(0, 100)}`;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥: name="${lead.name}", leadKey="${leadKey}"`);
    
    if (seenLeads.has(leadKey)) {
      duplicates.push(lead);
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ª–∏–¥–∞: ${lead.name} - ${(lead.message || '').substring(0, 50)}...`);
    } else {
      seenLeads.add(leadKey);
      uniqueLeads.push(lead);
      console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω: ${lead.name}`);
    }
  }
  
  console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: ${uniqueLeads.length}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
  
  return {
    uniqueLeads,
    duplicates,
    duplicateCount: duplicates.length
  };
}

async function debugDuplicateCheck() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads;
    console.log(`–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads.length}\n`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
    const newLeads = leads.filter(lead => lead.sent !== true);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${newLeads.length}\n`);
    
    newLeads.forEach((lead, index) => {
      console.log(`–õ–∏–¥ ${index}: name="${lead.name}", sent=${lead.sent}, message="${(lead.message || '').substring(0, 50)}..."`);
    });
    
    console.log('\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicateCheck = checkForDuplicateLeads(newLeads);
    
    console.log('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç ---');
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${duplicateCheck.uniqueLeads.length}`);
    console.log(`–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${duplicateCheck.duplicateCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

debugDuplicateCheck();