const axios = require('axios');

async function debugCronDetailed() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ cron –∑–∞–¥–∞—á–∏...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads;
    
    console.log(`–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads ? leads.length : 0}`);
    
    if (leads && leads.length > 0) {
      leads.forEach((lead, index) => {
        console.log(`  –õ–∏–¥ ${index}: sent=${lead.sent}, name=${lead.name || 'undefined'}`);
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
    const settingsResponse = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settingsResponse.data);

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º cron —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('\n3. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç cron:', cronResponse.data);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    const leadsAfter = leadsAfterResponse.data.leads;
    
    if (leadsAfter && leadsAfter.length > 0) {
      leadsAfter.forEach((lead, index) => {
        console.log(`  –õ–∏–¥ ${index} –ø–æ—Å–ª–µ cron: sent=${lead.sent}, name=${lead.name || 'undefined'}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

debugCronDetailed();