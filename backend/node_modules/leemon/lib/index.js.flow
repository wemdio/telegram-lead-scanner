// @flow

export type Bool = 1 | 0;
declare export function GCD(x: Array<number>, y: Array<number>): Array<number>;
declare export function GCD_(x: Array<number>, y: Array<number>): void;
declare export function add(x: Array<number>, y: Array<number>): Array<number>;
declare export function addInt(x: Array<number>, n: number): Array<number>;
declare export function addInt_(x: Array<number>, n: number): void;
declare export function addShift_(x: Array<number>, y: Array<number>, ys: number): void;
declare export function add_(x: Array<number>, y: Array<number>): void;
declare export function bigInt2str(x: Array<number>, base: number): string;
declare export function bitSize(x: Array<number>): number;
declare export var bpe: number;
declare export function carry_(x: Array<number>): void;
declare export function copyInt_(x: Array<number>, n: number): void;
declare export function copy_(x: Array<number>, y: Array<number>): void;
declare export function divInt_(x: Array<number>, n: number): number;
declare export function divide_(x: Array<number>, y: Array<number>, q: Array<number>, r: Array<number>): void;
declare export function dup(x: Array<number>): Array<number>;
declare export function eGCD_(x: Array<number>, y: Array<number>, v: Array<number>, a: Array<number>, b: Array<number>): void;
declare export function equals(x: Array<number>, y: Array<number>): 1 | 0;
declare export function equalsInt(x: Array<number>, y: number): 1 | 0;
declare export function expand(x: Array<number>, n: number): Array<number>;
declare export function findPrimes(n: number): Array<number>;
declare export function greater(x: Array<number>, y: Array<number>): 1 | 0;
declare export function greaterShift(x: Array<number>, y: Array<number>, shift: number): 1 | 0;
declare export function halve_(x: Array<number>): void;
declare export function int2bigInt(t: number, bits: number, minSize: number): Array<number>;
declare export function inverseMod(x: Array<number>, n: Array<number>): Array<number> | null;
declare export function inverseModInt(x: number, n: number): number;
declare export function inverseMod_(x: Array<number>, n: Array<number>): 1 | 0;
declare export function isZero(x: Array<number>): 1 | 0;
declare export function leftShift_(x: Array<number>, n: number): void;
declare export function linCombShift_(x: Array<number>, y: Array<number>, b: number, ys: number): void;
declare export function linComb_(x: Array<number>, y: Array<number>, a: number, b: number): void;
declare export function millerRabin(x: Array<number>, b: Array<number>): 1 | 0;
declare export function millerRabinInt(x: Array<number>, b: number): 1 | 0;
declare export function mod(x: Array<number>, n: Array<number>): Array<number>;
declare export function modInt(x: Array<number>, n: number): number;
declare export function mod_(x: Array<number>, n: Array<number>): void;
declare export function mont_(x: Array<number>, y: Array<number>, n: Array<number>, np: number): void;
declare export function mult(x: Array<number>, y: Array<number>): Array<number>;
declare export function multInt_(x: Array<number>, n: number): void;
declare export function multMod(x: Array<number>, y: Array<number>, n: Array<number>): Array<number>;
declare export function multMod_(x: Array<number>, y: Array<number>, n: Array<number>): void;
declare export function mult_(x: Array<number>, y: Array<number>): void;
declare export function negative(x: Array<number>): number;
declare export var one: Array<number>;
declare export function powMod(x: Array<number>, y: Array<number>, n: Array<number>): Array<number>;
declare export function powMod_(x: Array<number>, y: Array<number>, n: Array<number>): void;
declare export function randBigInt(n: number, s: number): Array<number>;
declare export function randBigInt_(b: Array<number>, n: number, s: number): void;
declare export function randProbPrime(k: number): Array<number>;
declare export function randProbPrimeRounds(k: number, n: number): Array<number>;
declare export function randTruePrime(k: number): Array<number>;
declare export function randTruePrime_(ans: Array<number>, k: number): void;
declare export function rightShift_(x: Array<number>, n: number): void;
declare export function squareMod_(x: Array<number>, n: Array<number>): void;
declare export function str2bigInt(s: string, base: number, minSize?: number): Array<number>;
declare export function sub(x: Array<number>, y: Array<number>): Array<number>;
declare export function subShift_(x: Array<number>, y: Array<number>, ys: number): void;
declare export function sub_(x: Array<number>, y: Array<number>): void;
declare export function trim(x: Array<number>, k: number): Array<number>;
declare export var zero: Array<number>;

