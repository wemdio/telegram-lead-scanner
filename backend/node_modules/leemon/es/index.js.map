{"version":3,"sources":["../src/index.js"],"names":["bpe","mask","radix","digitsStr","one","int2bigInt","zero","t","Array","ss","s0","s3","s4","s5","s6","s7","T","sa","mr_x1","mr_r","mr_a","eg_v","eg_u","eg_A","eg_B","eg_C","eg_D","primes","pows","s_i","s_i2","s_R","s_rm","s_q","s_n1","s_a","s_r2","s_n","s_b","s_d","s_x1","s_x2","s_aa","rpprb","k","buff","findPrimes","n","i","s","p","ans","millerRabinInt","x","b","length","dup","copyInt_","millerRabin","j","copy_","addInt_","rightShift_","powMod_","equalsInt","equals","squareMod_","bitSize","z","w","expand","randTruePrime","randTruePrime_","trim","randProbPrime","randProbPrimeRounds","divisible","B","randBigInt_","modInt","greater","mod","mod_","addInt","mult","y","mult_","powMod","sub","sub_","add","add_","inverseMod","inverseMod_","multMod","multMod_","c","m","pm","dd","r","zz","recSize","Math","pow","recLimit","floor","random","carry_","divide_","multInt_","isZero","GCD_","randBigInt","a","GCD","xc","yc","xp","yp","A","C","D","q","sing","qp","linComb_","max","halve_","negative","inverseModInt","inverseModInt_","eGCD_","v","g","leftShift_","greaterShift","shift","kx","ky","y1","y2","subShift_","linCombShift_","addShift_","bits","minSize","ceil","str2bigInt","base","d","kk","parseInt","indexOf","substring","bigInt2str","divInt_","len","ys","kn","k1","k2","np","mont_","ui","ks"],"mappings":"AAAA;AAGA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA,OAAO,IAAIA,MAAM,CAAV,C,CAAY;;AACnB,IAAIC,OAAO,CAAX,C,CAAa;;AACb,IAAIC,QAAQD,OAAO,CAAnB,C,CAAqB;AAErB;;AACA,IAAIE,YACF,mGADF,C,CAGA;AAEA;;AACA,KAAKH,MAAM,CAAX,EAAc,KAAMA,MAAM,CAAZ,GAAiB,KAAKA,GAApC,EAAyCA,KAAzC;AAA+C;AAA/C;;AACAA,QAAQ,CAAR,C,CAAU;;AACVC,OAAO,CAAC,KAAKD,GAAN,IAAa,CAApB,C,CAAsB;;AACtBE,QAAQD,OAAO,CAAf,C,CAAiB;;AACjB,OAAO,IAAIG,MAAMC,WAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAV,C,CAA8B;;AACrC,OAAO,IAAIC,OAAOD,WAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAX,C,CAEP;AACA;;AACA,IAAIE,IAAI,IAAIC,KAAJ,CAAU,CAAV,CAAR;AACA,IAAIC,KAAKF,CAAT,C,CAAW;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","sourcesContent":["'use strict'\n//@flow\n\n/** * * * * * * * * * *\n * Big Integer Library *\n * Created 2000        *\n * Leemon Baird        *\n * www.leemon.com      *\n * * * * * * * * * * * */\n\n////////////////////////////////////////////////////////////////////////////////////////\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// void eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\nexport type Bool = 1 | 0\n\n//globals\nexport var bpe = 0 //bits stored per array element\nvar mask = 0 //AND this with an array element to chop it down to bpe bits\nvar radix = mask + 1 //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\nvar digitsStr =\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-'\n\n//initialize the global variables\n\n//bpe=number of bits in the mantissa on this platform\nfor (bpe = 0; 1 << (bpe + 1) > 1 << bpe; bpe++);\nbpe >>= 1 //bpe=number of bits in one element of the array representing the bigInt\nmask = (1 << bpe) - 1 //AND the mask with an integer to get its bpe least significant bits\nradix = mask + 1 //2^bpe.  a single 1 bit to the left of the first bit of mask\nexport var one = int2bigInt(1, 1, 1) //constant used in powMod_()\nexport var zero = int2bigInt(0, 1, 1)\n\n//the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t = new Array(0)\nvar ss = t //used in mult_()\nvar s0 = t //used in multMod_(), squareMod_()\n// var s1=t;    //used in powMod_(), multMod_(), squareMod_()\n// var s2=t;    //used in powMod_(), multMod_()\nvar s3 = t //used in powMod_()\nvar s4 = t,\n    s5 = t //used in mod_()\nvar s6 = t //used in bigInt2str()\nvar s7 = t //used in powMod_()\nvar T = t //used in GCD_()\nvar sa = t //used in mont_()\nvar mr_x1 = t,\n    mr_r = t,\n    mr_a = t, //used in millerRabin()\n    eg_v = t,\n    eg_u = t,\n    eg_A = t,\n    eg_B = t,\n    eg_C = t,\n    eg_D = t, //used in eGCD_(), inverseMod_()\n    //, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\n\n    primes = t,\n    pows = t,\n    s_i = t,\n    s_i2 = t,\n    s_R = t,\n    s_rm = t,\n    s_q = t,\n    s_n1 = t,\n    s_a = t,\n    s_r2 = t,\n    s_n = t,\n    s_b = t,\n    s_d = t,\n    s_x1 = t,\n    s_x2 = t,\n    s_aa = t, //used in randTruePrime_()\n    rpprb = t //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\nvar k, buff\n\n/**\n * return array of all primes less than integer n\n *\n * @param {number} n\n * @returns {number[]}\n */\nexport function findPrimes(n: number): number[] {\n  var i, s, p, ans\n  s = new Array(n)\n  for (i = 0; i < n; i++) s[i] = 0\n  s[0] = 2\n  p = 0 //first p elements of s are primes, the rest are a sieve\n  for (; s[p] < n; ) {\n    //s[p] is the pth prime\n    for (\n      i = s[p] * s[p];\n      i < n;\n      i += s[p] //mark multiples of s[p]\n    )\n      s[i] = 1\n    p++\n    s[p] = s[p - 1] + 1\n    for (; s[p] < n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans = new Array(p)\n  for (i = 0; i < p; i++) ans[i] = s[i]\n  return ans\n}\n\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x is a bigInt, and b is an integer, with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number} b\n * @returns {(0 | 1)}\n */\nexport function millerRabinInt(x: number[], b: number): Bool {\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x)\n    mr_r = dup(x)\n    mr_a = dup(x)\n  }\n\n  copyInt_(mr_a, b)\n  return millerRabin(x, mr_a)\n}\n\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x and b are bigInts with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number[]} b\n * @returns {(0 | 1)}\n */\nexport function millerRabin(x: number[], b: number[]): Bool {\n  var i, j, k, s\n\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x)\n    mr_r = dup(x)\n    mr_a = dup(x)\n  }\n\n  copy_(mr_a, b)\n  copy_(mr_r, x)\n  copy_(mr_x1, x)\n\n  addInt_(mr_r, -1)\n  addInt_(mr_x1, -1)\n\n  //s=the highest power of two that divides mr_r\n  k = 0\n  for (i = 0; i < mr_r.length; i++)\n    for (j = 1; j < mask; j <<= 1)\n      if (x[i] & j) {\n        s = k < mr_r.length + bpe ? k : 0\n        i = mr_r.length\n        j = mask\n      } else k++\n\n  if (s) rightShift_(mr_r, s)\n\n  powMod_(mr_a, mr_r, x)\n\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n    j = 1\n    //$off\n    while (j <= s - 1 && !equals(mr_a, mr_x1)) {\n      squareMod_(mr_a, x)\n      if (equalsInt(mr_a, 1)) {\n        return 0\n      }\n      j++\n    }\n    if (!equals(mr_a, mr_x1)) {\n      return 0\n    }\n  }\n  return 1\n}\n\n/**\n * returns how many bits long the bigInt is, not counting leading zeros.\n *\n * @param {number[]} x\n * @returns {number}\n */\nexport function bitSize(x: number[]): number {\n  var j, z, w\n  for (j = x.length - 1; x[j] == 0 && j > 0; j--);\n  for (z = 0, w = x[j]; w; w >>= 1, z++);\n  z += bpe * j\n  return z\n}\n\n/**\n * return a copy of x with at least n elements, adding leading zeros if needed\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\nexport function expand(x: number[], n: number): number[] {\n  var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0)\n  copy_(ans, x)\n  return ans\n}\n\n/**\n * return a k-bit true random prime using Maurer's algorithm.\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\nexport function randTruePrime(k: number): number[] {\n  var ans = int2bigInt(0, k, 0)\n  randTruePrime_(ans, k)\n  return trim(ans, 1)\n}\n\n/**\n * return a k-bit random probable prime with probability of error < 2^-80\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\nexport function randProbPrime(k: number): number[] {\n  if (k >= 600) return randProbPrimeRounds(k, 2) //numbers from HAC table 4.3\n  if (k >= 550) return randProbPrimeRounds(k, 4)\n  if (k >= 500) return randProbPrimeRounds(k, 5)\n  if (k >= 400) return randProbPrimeRounds(k, 6)\n  if (k >= 350) return randProbPrimeRounds(k, 7)\n  if (k >= 300) return randProbPrimeRounds(k, 9)\n  if (k >= 250) return randProbPrimeRounds(k, 12) //numbers from HAC table 4.4\n  if (k >= 200) return randProbPrimeRounds(k, 15)\n  if (k >= 150) return randProbPrimeRounds(k, 18)\n  if (k >= 100) return randProbPrimeRounds(k, 27)\n  return randProbPrimeRounds(k, 40) //number from HAC remark 4.26 (only an estimate)\n}\n\n/**\n * return a k-bit probable random prime using n rounds of Miller Rabin\n * (after trial division with small primes)\n *\n * @export\n * @param {number} k\n * @param {number} n\n * @returns {number[]}\n */\nexport function randProbPrimeRounds(k: number, n: number): number[] {\n  var ans, i, divisible, B\n  B = 30000 //B is largest prime to use in trial division\n  ans = int2bigInt(0, k, 0)\n\n  //optimization: try larger and smaller B to find the best limit.\n\n  if (primes.length === 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\n\n  if (rpprb.length !== ans.length) rpprb = dup(ans)\n\n  for (;;) {\n    //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n\n    randBigInt_(ans, k, 0) //ans = a random odd number to check\n    ans[0] |= 1\n    divisible = 0\n\n    //check ans for divisibility by small primes up to B\n    for (i = 0; i < primes.length && primes[i] <= B; i++)\n      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {\n        divisible = 1\n        break\n      }\n\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n\n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i = 0; i < n && !divisible; i++) {\n      randBigInt_(rpprb, k, 0)\n      while (\n        !greater(ans, rpprb) //pick a random rpprb that's < ans\n      )\n        randBigInt_(rpprb, k, 0)\n      if (!millerRabin(ans, rpprb)) divisible = 1\n    }\n\n    if (!divisible) return ans\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n}\n\n/**\n * return a new bigInt equal to (x mod n) for bigInts x and n.\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function mod(x: number[], n: number[]): number[] {\n  var ans = dup(x)\n  mod_(ans, n)\n  return trim(ans, 1)\n}\n\n/**\n * return (x+n) where x is a bigInt and n is an integer.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\nexport function addInt(x: number[], n: number): number[] {\n  var ans = expand(x, x.length + 1)\n  addInt_(ans, n)\n  return trim(ans, 1)\n}\n\n/**\n * return x*y for bigInts x and y. This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function mult(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length + y.length)\n  mult_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.\n *\n * 0**0=1.\n *\n * Faster for odd n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function powMod(x: number[], y: number[], n: number[]): number[] {\n  var ans = expand(x, n.length)\n  powMod_(\n    //this should work without the trim, but doesn't\n    ans,\n    trim(y, 2),\n    trim(n, 2),\n  )\n  return trim(ans, 1)\n}\n\n/**\n * return (x-y) for bigInts x and y\n *\n * Negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function sub(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\n  sub_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x+y) for bigInts x and y\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function add(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\n  add_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x**(-1) mod n) for bigInts x and n.\n *\n * If no inverse exists, it returns null\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(number[] | null)}\n */\nexport function inverseMod(x: number[], n: number[]): number[] | null {\n  var ans = expand(x, n.length)\n  var s = inverseMod_(ans, n)\n  return s ? trim(ans, 1) : null\n}\n\n/**\n * return (x*y mod n) for bigInts x,y,n.\n *\n * For greater speed, let y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function multMod(x: number[], y: number[], n: number[]): number[] {\n  var ans = expand(x, n.length)\n  multMod_(ans, y, n)\n  return trim(ans, 1)\n}\n\n/**\n * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.\n *\n * The bigInt ans must be large enough to hold it.\n *\n * @export\n * @param {number[]} ans\n * @param {number} k\n * @return {void}\n */\nexport function randTruePrime_(ans: number[], k: number): void {\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize\n  var w\n  if (primes.length == 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\n\n  if (pows.length == 0) {\n    pows = new Array(512)\n    for (j = 0; j < 512; j++) {\n      pows[j] = Math.pow(2, j / 511 - 1)\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c = 0.1 //c=0.1 in HAC\n  m = 20 //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  var recLimit = 20 //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length != ans.length) {\n    s_i2 = dup(ans)\n    s_R = dup(ans)\n    s_n1 = dup(ans)\n    s_r2 = dup(ans)\n    s_d = dup(ans)\n    s_x1 = dup(ans) //TODO Seems like a bug in eslint, reports as unused\n    s_x2 = dup(ans)\n    s_b = dup(ans)\n    s_n = dup(ans)\n    s_i = dup(ans)\n    s_rm = dup(ans)\n    s_q = dup(ans)\n    s_a = dup(ans)\n    s_aa = dup(ans)\n  }\n\n  if (k <= recLimit) {\n    //generate small random primes by trial division up to its square root\n    pm = (1 << ((k + 2) >> 1)) - 1 //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans, 0)\n    for (dd = 1; dd; ) {\n      dd = 0\n      ans[0] = 1 | (1 << (k - 1)) | Math.floor(Math.random() * (1 << k)) //random, k-bit, odd integer, with msb 1\n      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {\n        //trial division by all primes 3...sqrt(2^k)\n        if (0 == ans[0] % primes[j]) {\n          dd = 1\n          break\n        }\n      }\n    }\n    carry_(ans)\n    return\n  }\n\n  B = c * k * k //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k > 2 * m)\n    //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r = 1; k - k * r <= m; ) r = pows[Math.floor(Math.random() * 512)] //r=Math.pow(2,Math.random()-1);\n  else r = 0.5\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize = Math.floor(r * k) + 1\n\n  randTruePrime_(s_q, recSize)\n  copyInt_(s_i2, 0)\n  s_i2[Math.floor((k - 2) / bpe)] |= 1 << ((k - 2) % bpe) //s_i2=2^(k-2)\n  divide_(s_i2, s_q, s_i, s_rm) //s_i=floor((2^(k-1))/(2q))\n\n  z = bitSize(s_i)\n\n  for (;;) {\n    for (;;) {\n      //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R, z, 0)\n      if (greater(s_i, s_R)) break\n    } //now s_R is in the range [0,s_i-1]\n    addInt_(s_R, 1) //now s_R is in the range [1,s_i]\n    add_(s_R, s_i) //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n, s_q)\n    mult_(s_n, s_R)\n    multInt_(s_n, 2)\n    addInt_(s_n, 1) //s_n=2*s_R*s_q+1\n\n    copy_(s_r2, s_R)\n    multInt_(s_r2, 2) //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++)\n      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {\n        divisible = 1\n        break\n      }\n\n    if (!divisible)\n      if (!millerRabinInt(s_n, 2))\n        //if it passes small primes check, then try a single Miller-Rabin base 2\n        //this line represents 75% of the total runtime for randTruePrime_\n        divisible = 1\n\n    if (!divisible) {\n      //if it passes that test, continue checking s_n\n      addInt_(s_n, -3)\n      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--); //strip leading zeros\n      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++);\n      zz += bpe * j //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {\n        //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a, zz, 0)\n        if (greater(s_n, s_a)) break\n      } //now s_a is in the range [0,s_n-1]\n      addInt_(s_n, 3) //now s_a is in the range [0,s_n-4]\n      addInt_(s_a, 2) //now s_a is in the range [2,s_n-2]\n      copy_(s_b, s_a)\n      copy_(s_n1, s_n)\n      addInt_(s_n1, -1)\n      powMod_(s_b, s_n1, s_n) //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b, -1)\n      if (isZero(s_b)) {\n        copy_(s_b, s_a)\n        powMod_(s_b, s_r2, s_n)\n        addInt_(s_b, -1)\n        copy_(s_aa, s_n)\n        copy_(s_d, s_b)\n        GCD_(s_d, s_n) //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d, 1)) {\n          copy_(ans, s_aa)\n          return //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n\n/**\n * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n *\n * @export\n * @param {number} n\n * @param {number} s\n * @returns {number[]}\n */\nexport function randBigInt(n: number, s: number): number[] {\n  var a, b\n  a = Math.floor((n - 1) / bpe) + 2 //# array elements to hold the BigInt with a leading 0 element\n  b = int2bigInt(0, 0, a)\n  randBigInt_(b, n, s)\n  return b\n}\n\n/**\n * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n *\n * Array b must be big enough to hold the result. Must have n>=1\n *\n * @export\n * @param {number[]} b\n * @param {number} n\n * @param {number} s\n * @return {void}\n */\nexport function randBigInt_(b: number[], n: number, s: number): void {\n  var i, a\n  for (i = 0; i < b.length; i++) b[i] = 0\n  a = Math.floor((n - 1) / bpe) + 1 //# array elements to hold the BigInt\n  for (i = 0; i < a; i++) {\n    b[i] = Math.floor(Math.random() * (1 << (bpe - 1)))\n  }\n  b[a - 1] &= (2 << ((n - 1) % bpe)) - 1\n  if (s == 1) b[a - 1] |= 1 << ((n - 1) % bpe)\n}\n\n/**\n * Return the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function GCD(x: number[], y: number[]): number[] {\n  var xc, yc\n  xc = dup(x)\n  yc = dup(y)\n  GCD_(xc, yc)\n  return xc\n}\n\n/**\n * set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * y is destroyed.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n */\nexport function GCD_(x: number[], y: number[]): void {\n  var i, xp, yp, A, B, C, D, q, sing\n  var qp\n  if (T.length !== x.length) T = dup(x)\n\n  sing = 1\n  while (sing) {\n    //while y has nonzero elements other than y[0]\n    sing = 0\n    for (\n      i = 1;\n      i < y.length;\n      i++ //check if y has nonzero elements other than 0\n    )\n      if (y[i]) {\n        sing = 1\n        break\n      }\n    if (!sing) break //quit when y all zero elements except possibly y[0]\n\n    for (i = x.length; !x[i] && i >= 0; i--); //find most significant element of x\n    xp = x[i]\n    yp = y[i]\n    A = 1\n    B = 0\n    C = 0\n    D = 1\n    while (yp + C && yp + D) {\n      q = Math.floor((xp + A) / (yp + C))\n      qp = Math.floor((xp + B) / (yp + D))\n      if (q != qp) break\n      t = A - q * C\n      A = C\n      C = t //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n      t = B - q * D\n      B = D\n      D = t\n      t = xp - q * yp\n      xp = yp\n      yp = t\n    }\n    if (B) {\n      copy_(T, x)\n      linComb_(x, y, A, B) //x=A*x+B*y\n      linComb_(y, T, D, C) //y=D*y+C*T\n    } else {\n      mod_(x, y)\n      copy_(T, x)\n      copy_(x, y)\n      copy_(y, T)\n    }\n  }\n  if (y[0] === 0) return\n  t = modInt(x, y[0])\n  copyInt_(x, y[0])\n  y[0] = t\n  while (y[0]) {\n    x[0] %= y[0]\n    t = x[0]\n    x[0] = y[0]\n    y[0] = t\n  }\n}\n\n/**\n * do x=x**(-1) mod n, for bigInts x and n.\n *\n * If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n * The x array must be at least as large as the n array.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(0 | 1)}\n */\nexport function inverseMod_(x: number[], n: number[]): Bool {\n  var k = 1 + 2 * Math.max(x.length, n.length)\n\n  if (!(x[0] & 1) && !(n[0] & 1)) {\n    //if both inputs are even, then inverse doesn't exist\n    copyInt_(x, 0)\n    return 0\n  }\n\n  if (eg_u.length != k) {\n    eg_u = new Array(k)\n    eg_v = new Array(k)\n    eg_A = new Array(k)\n    eg_B = new Array(k)\n    eg_C = new Array(k)\n    eg_D = new Array(k)\n  }\n\n  copy_(eg_u, x)\n  copy_(eg_v, n)\n  copyInt_(eg_A, 1)\n  copyInt_(eg_B, 0)\n  copyInt_(eg_C, 0)\n  copyInt_(eg_D, 1)\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while eg_u is even\n      halve_(eg_u)\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if eg_A==eg_B==0 mod 2\n        halve_(eg_A)\n        halve_(eg_B)\n      } else {\n        add_(eg_A, n)\n        halve_(eg_A)\n        sub_(eg_B, x)\n        halve_(eg_B)\n      }\n    }\n\n    while (!(eg_v[0] & 1)) {\n      //while eg_v is even\n      halve_(eg_v)\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if eg_C==eg_D==0 mod 2\n        halve_(eg_C)\n        halve_(eg_D)\n      } else {\n        add_(eg_C, n)\n        halve_(eg_C)\n        sub_(eg_D, x)\n        halve_(eg_D)\n      }\n    }\n\n    if (!greater(eg_v, eg_u)) {\n      //eg_v <= eg_u\n      sub_(eg_u, eg_v)\n      sub_(eg_A, eg_C)\n      sub_(eg_B, eg_D)\n    } else {\n      //eg_v > eg_u\n      sub_(eg_v, eg_u)\n      sub_(eg_C, eg_A)\n      sub_(eg_D, eg_B)\n    }\n\n    if (equalsInt(eg_u, 0)) {\n      while (\n        negative(eg_C) //make sure answer is nonnegative\n      )\n        add_(eg_C, n)\n      copy_(x, eg_C)\n\n      if (!equalsInt(eg_v, 1)) {\n        //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x, 0)\n        return 0\n      }\n      return 1\n    }\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n}\n\n/**\n * return x**(-1) mod n, for integers x and n.\n *\n * Return 0 if there is no inverse\n *\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\nexport function inverseModInt(x: number, n: number): number {\n  var a = 1,\n      b = 0,\n      t\n  for (;;) {\n    if (x === 1) return a\n    if (x === 0) return 0\n    b -= a * Math.floor(n / x)\n    //$off\n    n %= x\n\n    if (n === 1) return b //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n === 0) return 0\n    a -= b * Math.floor(x / n)\n    //$off\n    x %= n\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n}\n\n//this deprecated function is for backward compatibility only.\nfunction inverseModInt_(x: number, n: number) {\n  return inverseModInt(x, n)\n}\n\n/**\n * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n *\n *      v = GCD_(x,y) = a*x-b*y\n *\n * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} v\n * @param {number[]} a\n * @param {number[]} b\n * @return {void}\n */\nexport function eGCD_(\n  x: number[],\n  y: number[],\n  v: number[],\n  a: number[],\n  b: number[],\n): void {\n  var g = 0\n  var k = Math.max(x.length, y.length)\n  if (eg_u.length != k) {\n    eg_u = new Array(k)\n    eg_A = new Array(k)\n    eg_B = new Array(k)\n    eg_C = new Array(k)\n    eg_D = new Array(k)\n  }\n  while (!(x[0] & 1) && !(y[0] & 1)) {\n    //while x and y both even\n    halve_(x)\n    halve_(y)\n    g++\n  }\n  copy_(eg_u, x)\n  copy_(v, y)\n  copyInt_(eg_A, 1)\n  copyInt_(eg_B, 0)\n  copyInt_(eg_C, 0)\n  copyInt_(eg_D, 1)\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while u is even\n      halve_(eg_u)\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if A==B==0 mod 2\n        halve_(eg_A)\n        halve_(eg_B)\n      } else {\n        add_(eg_A, y)\n        halve_(eg_A)\n        sub_(eg_B, x)\n        halve_(eg_B)\n      }\n    }\n\n    while (!(v[0] & 1)) {\n      //while v is even\n      halve_(v)\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if C==D==0 mod 2\n        halve_(eg_C)\n        halve_(eg_D)\n      } else {\n        add_(eg_C, y)\n        halve_(eg_C)\n        sub_(eg_D, x)\n        halve_(eg_D)\n      }\n    }\n\n    if (!greater(v, eg_u)) {\n      //v<=u\n      sub_(eg_u, v)\n      sub_(eg_A, eg_C)\n      sub_(eg_B, eg_D)\n    } else {\n      //v>u\n      sub_(v, eg_u)\n      sub_(eg_C, eg_A)\n      sub_(eg_D, eg_B)\n    }\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C)) {\n        //make sure a (C) is nonnegative\n        add_(eg_C, y)\n        sub_(eg_D, x)\n      }\n      multInt_(eg_D, -1) ///make sure b (D) is nonnegative\n      copy_(a, eg_C)\n      copy_(b, eg_D)\n      leftShift_(v, g)\n      return\n    }\n  }\n}\n\n/**\n * is bigInt x negative?\n *\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function negative(x: number[]) {\n  //TODO Flow Bool type inference\n  return (x[x.length - 1] >> (bpe - 1)) & 1\n}\n\n/**\n * is (x << (shift*bpe)) > y?\n *\n * x and y are nonnegative bigInts\n * shift is a nonnegative integer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} shift\n * @returns {(1 | 0)}\n */\nexport function greaterShift(x: number[], y: number[], shift: number): Bool {\n  var i,\n      kx = x.length,\n      ky = y.length\n  k = kx + shift < ky ? kx + shift : ky\n  for (i = ky - 1 - shift; i < kx && i >= 0; i++) if (x[i] > 0) return 1 //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i = kx - 1 + shift; i < ky; i++) if (y[i] > 0) return 0 //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i = k - 1; i >= shift; i--)\n    if (x[i - shift] > y[i]) return 1\n    else if (x[i - shift] < y[i]) return 0\n  return 0\n}\n\n/**\n * is x > y?\n *\n * x and y both nonnegative\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function greater(x: number[], y: number[]): Bool {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n\n  for (i = x.length; i < y.length; i++) if (y[i]) return 0 //y has more digits\n\n  for (i = y.length; i < x.length; i++) if (x[i]) return 1 //x has more digits\n\n  for (i = k - 1; i >= 0; i--)\n    if (x[i] > y[i]) return 1\n    else if (x[i] < y[i]) return 0\n  return 0\n}\n\n/**\n * divide x by y giving quotient q and remainder r.\n *\n *     q = floor(x/y)\n *     r = x mod y\n *\n * All 4 are bigints.\n *\n * * x must have at least one leading zero element.\n * * y must be nonzero.\n * * q and r must be arrays that are exactly the same length as x. (Or q can have more).\n * * Must have x.length >= y.length >= 2.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} q\n * @param {number[]} r\n * @return {void}\n */\nexport function divide_(\n  x: number[],\n  y: number[],\n  q: number[],\n  r: number[],\n): void {\n  var kx, ky\n  var i, j, y1, y2, c, a, b\n  copy_(r, x)\n  for (ky = y.length; y[ky - 1] === 0; ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set\n  b = y[ky - 1]\n  for (a = 0; b; a++) b >>= 1\n  a = bpe - a //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y, a) //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r, a)\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q, 0) // q=0\n  while (!greaterShift(y, r, kx - ky)) {\n    // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r, y, kx - ky) //   r=r-leftShift_(y,kx-ky)\n    q[kx - ky]++ //   q[kx-ky]++;\n  } // }\n\n  for (i = kx - 1; i >= ky; i--) {\n    if (r[i] == y[ky - 1]) q[i - ky] = mask\n    else q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1])\n\n    //The following for(;;) loop is equivalent to the commented while loop,\n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;\n    for (;;) {\n      y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky]\n      c = y2 >> bpe\n      y2 = y2 & mask\n      y1 = c + q[i - ky] * y[ky - 1]\n      c = y1 >> bpe\n      y1 = y1 & mask\n\n      if (\n        c == r[i]\n          ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1]\n          : c > r[i]\n      )\n        q[i - ky]--\n      else break\n    }\n\n    linCombShift_(r, y, -q[i - ky], i - ky) //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r, y, i - ky) //r=r+leftShift_(y,i-ky)\n      q[i - ky]--\n    }\n  }\n\n  rightShift_(y, a) //undo the normalization step\n  rightShift_(r, a) //undo the normalization step\n}\n\n/**\n * do carries and borrows so each element of the bigInt x fits in bpe bits.\n *\n * @param {number[]} x\n */\nexport function carry_(x: number[]): void {\n  var i, k, c, b\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i]\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n  }\n}\n\n/**\n * return x mod n for bigInt x and integer n.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number}\n */\nexport function modInt(x: number[], n: number): number {\n  var i,\n      c = 0\n  for (i = x.length - 1; i >= 0; i--) c = (c * radix + x[i]) % n\n  return c\n}\n\n/**\n * convert the integer t into a bigInt with at least the given number of bits.\n * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n * Pad the array with leading zeros so that it has at least minSize elements.\n *\n * There will always be at least one leading 0 element.\n *\n * @export\n * @param {number} t\n * @param {number} bits\n * @param {number} minSize\n * @returns {number[]}\n */\nexport function int2bigInt(t: number, bits: number, minSize: number): number[] {\n  var i, k\n  k = Math.ceil(bits / bpe) + 1\n  k = minSize > k ? minSize : k\n  var buff = new Array(k)\n  copyInt_(buff, t)\n  return buff\n}\n\n/**\n * return the bigInt given a string representation in a given base.\n * Pad the array with leading zeros so that it has at least minSize elements.\n * If base=-1, then it reads in a space-separated list of array elements in decimal.\n *\n * The array will always have at least one leading zero, unless base=-1.\n *\n * @export\n * @param {string} s\n * @param {number} base\n * @param {number} [minSize]\n * @returns {number[]}\n */\nexport function str2bigInt(\n  s: string,\n  base: number,\n  minSize?: number,\n): number[] {\n  var d, i, x, y, kk\n  var k = s.length\n  if (base === -1) {\n    //comma-separated list of array elements in decimal\n    x = new Array(0)\n    for (;;) {\n      y = new Array(x.length + 1)\n      for (i = 0; i < x.length; i++) y[i + 1] = x[i]\n      y[0] = parseInt(s, 10) //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\n      x = y\n      d = s.indexOf(',', 0)\n      if (d < 1) break\n      //$off\n      s = s.substring(d + 1)\n      if (s.length == 0) break\n    }\n    //$off\n    if (x.length < minSize) {\n      //$off\n      y = new Array(minSize)\n      copy_(y, x)\n      return y\n    }\n    return x\n  }\n\n  x = int2bigInt(0, base * k, 0)\n  for (i = 0; i < k; i++) {\n    d = digitsStr.indexOf(s.substring(i, i + 1), 0)\n    if (base <= 36 && d >= 36)\n      //convert lowercase to uppercase if base<=36\n      d -= 26\n    if (d >= base || d < 0) {\n      //stop at first illegal character\n      break\n    }\n    multInt_(x, base)\n    addInt_(x, d)\n  }\n\n  for (k = x.length; k > 0 && !x[k - 1]; k--); //strip off leading zeros\n  //$off\n  k = minSize > k + 1 ? minSize : k + 1\n  //$off\n  y = new Array(k)\n  //$off\n  kk = k < x.length ? k : x.length\n  //$off\n  for (i = 0; i < kk; i++) y[i] = x[i]\n  //$off\n  for (; i < k; i++) y[i] = 0\n  return y\n}\n\n//return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\n// function str2bigInt(s,b,minSize) {\n//   var d, i, j, base, str, x, y, kk;\n//   if (typeof b === 'string') {\n//           base = b.length;\n//           str = b;\n//   } else {\n//           base = b;\n//           str = digitsStr;\n//   }\n//   var k=s.length;\n//   if (base==-1) { //comma-separated list of array elements in decimal\n//       x=new Array(0);\n//       for (;;) {\n//           y=new Array(x.length+1);\n//           for (i=0;i<x.length;i++)\n//               y[i+1]=x[i];\n//           y[0]=parseInt(s,10);\n//           x=y;\n//           d=s.indexOf(',',0);\n//           if (d<1)\n//               break;\n//           s=s.substring(d+1);\n//           if (s.length==0)\n//               break;\n//       }\n//       if (x.length<minSize) {\n//           y=new Array(minSize);\n//           copy_(y,x);\n//           return y;\n//       }\n//       return x;\n//   }\n\n//   x=int2bigInt(0,base*k,0);\n// for (i=0;i<k;i++) {\n//   d=str.indexOf(s.substring(i,i+1),0);\n//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36\n//       d-=26;\n//   }\n//   if (d>=base || d<0) {   //ignore illegal characters\n//   continue;\n//       }\n//       multInt_(x,base);\n//       addInt_(x,d);\n//   }\n\n//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n//   k=minSize>k+1 ? minSize : k+1;\n//   y=new Array(k);\n//   kk=k<x.length ? k : x.length;\n//   for (i=0;i<kk;i++)\n//       y[i]=x[i];\n//   for (;i<k;i++)\n//       y[i]=0;\n//   return y;\n// }\n\n/**\n * is bigint x equal to integer y?\n *\n * y must have less than bpe bits\n *\n * @export\n * @param {number[]} x\n * @param {number} y\n * @returns {(1 | 0)}\n */\nexport function equalsInt(x: number[], y: number): Bool {\n  var i\n  if (x[0] != y) return 0\n  for (i = 1; i < x.length; i++) if (x[i]) return 0\n  return 1\n}\n\n/**\n * are bigints x and y equal?\n *\n * this works even if x and y are different lengths and have arbitrarily many leading zeros\n *\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function equals(x: number[], y: number[]): Bool {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n  for (i = 0; i < k; i++) if (x[i] !== y[i]) return 0\n  if (x.length > y.length) {\n    for (; i < x.length; i++) if (x[i]) return 0\n  } else {\n    for (; i < y.length; i++) if (y[i]) return 0\n  }\n  return 1\n}\n\n/**\n * is the bigInt x equal to zero?\n *\n * @export\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function isZero(x: number[]): Bool {\n  var i\n  for (i = 0; i < x.length; i++) if (x[i]) return 0\n  return 1\n}\n\n/**\n * Convert a bigInt into a string in a given base, from base 2 up to base 95.\n *\n * Base -1 prints the contents of the array representing the number.\n *\n * @export\n * @param {number[]} x\n * @param {number} base\n * @returns {string}\n */\nexport function bigInt2str(x: number[], base: number): string {\n  var i,\n      t,\n      s = ''\n\n  if (s6.length !== x.length) s6 = dup(x)\n  else copy_(s6, x)\n\n  if (base === -1) {\n    //return the list of array contents\n    for (i = x.length - 1; i > 0; i--) s += x[i] + ','\n    s += x[0]\n  } else {\n    //return it in the given base\n    while (!isZero(s6)) {\n      t = divInt_(s6, base) //t=s6 % base; s6=floor(s6/base);\n      s = digitsStr.substring(t, t + 1) + s\n    }\n  }\n  if (s.length === 0) s = '0'\n  return s\n}\n\n/**\n * Returns a duplicate of bigInt x\n *\n * @export\n * @param {number[]} x\n * @returns {number[]}\n */\nexport function dup(x: number[]): number[] {\n  var i\n  buff = Array(x.length)\n  copy_(buff, x)\n  return buff\n}\n\n/**\n * do x=y on bigInts x and y.\n *\n * x must be an array at least as big as y (not counting the leading zeros in y).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {void}\n */\nexport function copy_(x: number[], y: number[]): void {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n  for (i = 0; i < k; i++) x[i] = y[i]\n  for (i = k; i < x.length; i++) x[i] = 0\n}\n\n/**\n * do x=y on bigInt x and integer y.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function copyInt_(x: number[], n: number): void {\n  var i, c\n  var len = x.length //TODO .length in for loop have perfomance costs. Bench this\n  for (c = n, i = 0; i < len; i++) {\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function addInt_(x: number[], n: number): void {\n  var i, k, c, b\n  x[0] += n\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i]\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n    if (!c) return //stop carrying as soon as the carry is zero\n  }\n}\n\n/**\n * right shift bigInt x by n bits.\n *\n *     0 <= n < bpe.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n */\nexport function rightShift_(x: number[], n: number): void {\n  var i\n  var k = Math.floor(n / bpe)\n  if (k) {\n    for (\n      i = 0;\n      i < x.length - k;\n      i++ //right shift x by k elements\n    )\n      x[i] = x[i + k]\n    for (; i < x.length; i++) x[i] = 0\n    //$off\n    n %= bpe\n  }\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & ((x[i + 1] << (bpe - n)) | (x[i] >> n))\n  }\n  x[i] >>= n\n}\n\n/**\n * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\n *\n * @param {number[]} x\n * @returns {void}\n */\nexport function halve_(x: number[]): void {\n  var i\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & ((x[i + 1] << (bpe - 1)) | (x[i] >> 1))\n  }\n  x[i] = (x[i] >> 1) | (x[i] & (radix >> 1)) //most significant bit stays the same\n}\n\n/**\n * left shift bigInt x by n bits\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function leftShift_(x: number[], n: number): void {\n  var i\n  var k = Math.floor(n / bpe)\n  if (k) {\n    for (\n      i = x.length;\n      i >= k;\n      i-- //left shift x by k elements\n    )\n      x[i] = x[i - k]\n    for (; i >= 0; i--) x[i] = 0\n    //$off\n    n %= bpe\n  }\n  if (!n) return\n  for (i = x.length - 1; i > 0; i--) {\n    x[i] = mask & ((x[i] << n) | (x[i - 1] >> (bpe - n)))\n  }\n  x[i] = mask & (x[i] << n)\n}\n\n/**\n * do x=x*n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function multInt_(x: number[], n: number): void {\n  var i, k, c, b\n  if (!n) return\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i] * n\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n  }\n}\n\n/**\n * do x=floor(x/n) for bigInt x and integer n, and return the remainder\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number} remainder\n */\nexport function divInt_(x: number[], n: number): number {\n  var i,\n      r = 0,\n      s\n  for (i = x.length - 1; i >= 0; i--) {\n    s = r * radix + x[i]\n    x[i] = Math.floor(s / n)\n    r = s % n\n  }\n  return r\n}\n\n/**\n * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} a\n * @param {number} b\n * @returns {void}\n */\nexport function linComb_(x: number[], y: number[], a: number, b: number): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  kk = x.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += a * x[i] + b * y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; i < kk; i++) {\n    c += a * x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} b\n * @param {number} ys\n * @returns {void}\n */\nexport function linCombShift_(\n  x: number[],\n  y: number[],\n  b: number,\n  ys: number,\n): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + b * y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.\n *\n * x must be large enough to hold the answer.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function addShift_(x: number[], y: number[], ys: number): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys\n *\n * x must be large enough to hold the answer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function subShift_(x: number[], y: number[], ys: number): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] - y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x-y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function sub_(x: number[], y: number[]): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] - y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < x.length; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function add_(x: number[], y: number[]): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] + y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < x.length; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x*y for bigInts x and y.\n *\n * This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function mult_(x: number[], y: number[]): void {\n  var i\n  if (ss.length != 2 * x.length) ss = new Array(2 * x.length)\n  copyInt_(ss, 0)\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(ss, x, y[i], i) //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x, ss)\n}\n\n/**\n * do x=x mod n for bigInts x and n\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function mod_(x: number[], n: number[]): void {\n  if (s4.length !== x.length) s4 = dup(x)\n  else copy_(s4, x)\n  if (s5.length !== x.length) s5 = dup(x)\n  divide_(s4, n, s5, x) //x = remainder of s4 / n\n}\n\n/**\n * do x=x*y mod n for bigInts x,y,n.\n *\n * for greater speed, let y<x.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function multMod_(x: number[], y: number[], n: number[]): void {\n  var i\n  if (s0.length != 2 * x.length) s0 = new Array(2 * x.length)\n  copyInt_(s0, 0)\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(s0, x, y[i], i) //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0, n)\n  copy_(x, s0)\n}\n\n/**\n * do x=x*x mod n for bigInts x,n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function squareMod_(x: number[], n: number[]): void {\n  var i, j, d, c, kx, kn, k\n  for (kx = x.length; kx > 0 && !x[kx - 1]; kx--); //ignore leading zeros in x\n  k = kx > n.length ? 2 * kx : 2 * n.length //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length != k) s0 = new Array(k)\n  copyInt_(s0, 0)\n  for (i = 0; i < kx; i++) {\n    c = s0[2 * i] + x[i] * x[i]\n    s0[2 * i] = c & mask\n    c >>= bpe\n    for (j = i + 1; j < kx; j++) {\n      c = s0[i + j] + 2 * x[i] * x[j] + c\n      s0[i + j] = c & mask\n      c >>= bpe\n    }\n    s0[i + kx] = c\n  }\n  mod_(s0, n)\n  copy_(x, s0)\n}\n\n/**\n * return x with exactly k leading zero elements\n *\n * @export\n * @param {number[]} x\n * @param {number} k\n * @returns {number[]}\n */\nexport function trim(x: number[], k: number): number[] {\n  var i, y\n  for (i = x.length; i > 0 && !x[i - 1]; i--);\n  y = new Array(i + k)\n  copy_(y, x)\n  return y\n}\n\n/**\n * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.\n *\n * this is faster when n is odd.\n *\n * x usually needs to have as many elements as n.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function powMod_(x: number[], y: number[], n: number[]): void {\n  var k1, k2, kn, np\n  if (s7.length != n.length) s7 = dup(n)\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0] & 1) == 0) {\n    copy_(s7, x)\n    copyInt_(x, 1)\n    while (!equalsInt(y, 0)) {\n      if (y[0] & 1) multMod_(x, s7, n)\n      divInt_(y, 2)\n      squareMod_(s7, n)\n    }\n    return\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7, 0)\n  for (kn = n.length; kn > 0 && !n[kn - 1]; kn--);\n  np = radix - inverseModInt(modInt(n, radix), radix)\n  s7[kn] = 1\n  multMod_(x, s7, n) // x = x * 2**(kn*bp) mod n\n\n  if (s3.length != x.length) s3 = dup(x)\n  else copy_(s3, x)\n  //$off\n  for (k1 = y.length - 1; (k1 > 0) & !y[k1]; k1--); //k1=first nonzero element of y\n  if (y[k1] == 0) {\n    //anything to the 0th power is 1\n    copyInt_(x, 1)\n    return\n  }\n  for (k2 = 1 << (bpe - 1); k2 && !(y[k1] & k2); k2 >>= 1); //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2 >>= 1)) {\n      //look at next bit of y\n      k1--\n      if (k1 < 0) {\n        mont_(x, one, n, np)\n        return\n      }\n      k2 = 1 << (bpe - 1)\n    }\n    mont_(x, x, n, np)\n\n    if (k2 & y[k1])\n      //if next bit is a 1\n      mont_(x, s3, n, np)\n  }\n}\n\n/**\n * do x=x*y*Ri mod n for bigInts x,y,n,\n * where Ri = 2**(-kn*bpe) mod n, and kn is the\n * number of elements in the n array, not\n * counting leading zeros.\n *\n * x array must have at least as many elemnts as the n array\n * It's OK if x and y are the same variable.\n *\n * must have:\n *  * x,y < n\n *  * n is odd\n *  * np = -(n^(-1)) mod radix\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @param {number} np\n * @return {void}\n */\nexport function mont_(x: number[], y: number[], n: number[], np: number): void {\n  var i, j, c, ui, t, ks\n  var kn = n.length\n  var ky = y.length\n\n  if (sa.length != kn) sa = new Array(kn)\n\n  copyInt_(sa, 0)\n\n  for (; kn > 0 && n[kn - 1] == 0; kn--); //ignore leading zeros of n\n  for (; ky > 0 && y[ky - 1] == 0; ky--); //ignore leading zeros of y\n  ks = sa.length - 1 //sa will never have more than this many nonzero elements.\n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i = 0; i < kn; i++) {\n    t = sa[0] + x[i] * y[0]\n    ui = ((t & mask) * np) & mask //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c = (t + ui * n[0]) >> bpe\n    t = x[i]\n\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j = 1\n    for (; j < ky - 4; ) {\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < ky; ) {\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < kn - 4; ) {\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < kn; ) {\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < ks; ) {\n      c += sa[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    sa[j - 1] = c & mask\n  }\n\n  if (!greater(n, sa)) sub_(sa, n)\n  copy_(x, sa)\n}\n"],"file":"index.js"}