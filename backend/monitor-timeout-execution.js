const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function monitorTimeoutExecution() {
  console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞...');
  
  let checkCount = 0;
  const maxChecks = 25; // –ú–∞–∫—Å–∏–º—É–º 25 –ø—Ä–æ–≤–µ—Ä–æ–∫ (–æ–∫–æ–ª–æ 4 –º–∏–Ω—É—Ç)
  
  const monitorInterval = setInterval(async () => {
    checkCount++;
    
    try {
      const statusResponse = await axios.get(`${BASE_URL}/scanner/status`);
      const status = statusResponse.data;
      
      const now = new Date();
      console.log(`\nüìä –ü–†–û–í–ï–†–ö–ê #${checkCount} (${now.toLocaleTimeString()})`);
      console.log('üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤:', status.activeTimeouts || 0);
      
      if (status.timeoutDetails && status.timeoutDetails.length > 0) {
        status.timeoutDetails.forEach((timeout, index) => {
          const timeRemaining = Math.round(timeout.timeRemaining / 1000);
          const expectedTime = new Date(timeout.expectedTriggerAt);
          
          console.log(`  ‚è≤Ô∏è –¢–∞–π–º–µ—Ä ${index + 1}:`);
          console.log(`     ID: ${timeout.id}`);
          console.log(`     –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedTime.toLocaleTimeString()}`);
          
          if (timeRemaining > 0) {
            console.log(`     ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${timeRemaining} —Å–µ–∫—É–Ω–¥`);
          } else {
            const overdue = Math.abs(timeRemaining);
            console.log(`     ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞: ${overdue} —Å–µ–∫—É–Ω–¥`);
            
            if (overdue > 30) {
              console.log('     ‚ùå –¢–ê–ô–ú–ï–† –ù–ï –°–†–ê–ë–û–¢–ê–õ! –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥');
            }
          }
        });
      } else {
        console.log('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (checkCount >= maxChecks) {
        console.log('\n‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫');
        clearInterval(monitorInterval);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await performFinalCheck();
        return;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
      if (status.activeTimeouts === 0) {
        console.log('\nüéâ –í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        clearInterval(monitorInterval);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await performFinalCheck();
        return;
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ #${checkCount}:`, error.message);
    }
    
  }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  
  console.log('‚è∞ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥...');
  console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
}

async function performFinalCheck() {
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
    const statusResponse = await axios.get(`${BASE_URL}/scanner/status`);
    const status = statusResponse.data;
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:');
    console.log('   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤:', status.activeTimeouts || 0);
    console.log('   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', status.lastScan);
    console.log('   ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', status.nextScan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
    const leadsResponse = await axios.get(`${BASE_URL}/leads`);
    const leads = leadsResponse.data;
    
    console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
    console.log('   üéØ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤:', leads.length || 0);
    
    if (leads.length > 0) {
      console.log('   ‚úÖ –ê–í–¢–û–ê–ù–ê–õ–ò–ó –°–†–ê–ë–û–¢–ê–õ! –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–¥—ã');
      const latestLead = leads[leads.length - 1];
      console.log('   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥:', {
        name: latestLead.name,
        timestamp: latestLead.timestamp,
        source: latestLead.source
      });
    } else {
      console.log('   ‚ö†Ô∏è –õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
  
  console.log('\nüèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
  console.log('\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

monitorTimeoutExecution();