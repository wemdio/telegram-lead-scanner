const axios = require('axios');

async function addSampleLeads() {
  try {
    console.log('üß™ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º—É...');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã
    const sampleLeads = [
      {
        id: 'lead-1',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        username: '@ivan_petrov',
        message: '–ò—â—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞',
        channel: 'test_channel',
        timestamp: new Date().toISOString(),
        sent: false
      },
      {
        id: 'lead-2', 
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        username: '@maria_sid',
        message: '–ù—É–∂–µ–Ω –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
        channel: 'test_channel',
        timestamp: new Date().toISOString(),
        sent: false
      },
      {
        id: 'lead-3',
        name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
        username: '@alex_kozlov',
        message: '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –æ–ø—Ç–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏, –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã',
        channel: 'test_channel',
        timestamp: new Date().toISOString(),
        sent: false
      },
      // –î—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏–¥–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      {
        id: 'lead-4',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        username: '@ivan_petrov',
        message: '–ò—â—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞',
        channel: 'test_channel',
        timestamp: new Date().toISOString(),
        sent: false
      }
    ];
    
    console.log('\n1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã —á–µ—Ä–µ–∑ store API...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ store API
    const storeResponse = await axios.post('http://localhost:3001/api/leads/store', {
      leads: sampleLeads,
      analysisTimestamp: new Date().toISOString(),
      criteria: '–¢–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–æ–≤:', storeResponse.data);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads || [];
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${leads.length}`);
    
    if (leads.length > 0) {
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:');
      leads.forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name} (@${lead.username}) - ${lead.message?.substring(0, 50)}...`);
      });
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–∏–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

addSampleLeads();