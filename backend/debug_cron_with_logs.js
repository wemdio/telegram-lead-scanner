const axios = require('axios');

async function debugCronWithLogs() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ cron –∑–∞–¥–∞—á–∏ —Å –ª–æ–≥–∞–º–∏...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads;
    console.log(`–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads.length}`);
    
    const unsentLeads = leads.filter(lead => lead.sent !== true);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${unsentLeads.length}`);
    
    unsentLeads.forEach((lead, index) => {
      console.log(`  –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥ ${index}: name=${lead.name}, sent=${lead.sent}, id=${lead.id}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
    const telegramResponse = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', telegramResponse.data);

    // 3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ sendNewLeads –∏–∑ cron.js
    const sendResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:', sendResponse.data);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    const leadsAfter = leadsAfterResponse.data.leads;
    
    const unsentAfter = leadsAfter.filter(lead => lead.sent !== true);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –ø–æ—Å–ª–µ: ${unsentAfter.length}`);
    
    unsentAfter.forEach((lead, index) => {
      console.log(`  –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥ ${index} –ø–æ—Å–ª–µ: name=${lead.name}, sent=${lead.sent}, id=${lead.id}`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
    const sentAfter = leadsAfter.filter(lead => lead.sent === true);
    console.log(`\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –ø–æ—Å–ª–µ: ${sentAfter.length}`);
    
    sentAfter.forEach((lead, index) => {
      console.log(`  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥ ${index}: name=${lead.name}, sent=${lead.sent}, id=${lead.id}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

debugCronWithLogs();