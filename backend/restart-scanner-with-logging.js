const fetch = require('node-fetch');

async function restartScannerWithLogging() {
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä...');
    const stopResponse = await fetch('http://localhost:3001/api/scanner/stop', {
      method: 'POST'
    });
    
    if (stopResponse.ok) {
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
    
    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –Ω–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
    const startResponse = await fetch('http://localhost:3001/api/scanner/start', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        scanInterval: 1,
        selectedChats: [
          { id: '-1001234567890', title: 'Test Chat 1', type: 'supergroup' },
          { id: '-1001234567891', title: 'Test Chat 2', type: 'supergroup' }
        ],
        telegramConfig: {
          apiId: '12345678',
          apiHash: 'test_api_hash',
          phoneNumber: '+1234567890',
          sessionString: 'test_session'
        },
        sheetsConfig: {
          serviceAccountEmail: 'test@example.com',
          privateKey: 'test_private_key'
        },
        spreadsheetId: '1test_spreadsheet_id',
        leadAnalysisSettings: {
          openrouterApiKey: 'test_openrouter_key',
          leadCriteria: '–ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è IT —É—Å–ª—É–≥'
        }
      })
    });
    
    if (startResponse.ok) {
      const result = await startResponse.json();
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
      console.log('üìä –°—Ç–∞—Ç—É—Å:', result);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(async () => {
        try {
          const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
          const status = await statusResponse.json();
          console.log('');
          console.log('üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:');
          console.log('  - –†–∞–±–æ—Ç–∞–µ—Ç:', status.isRunning);
          console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω:', status.lastScan);
          console.log('  - –°–ª–µ–¥—É—é—â–∏–π —Å–∫–∞–Ω:', status.nextScan);
          console.log('  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', status.totalMessages);
          console.log('');
          console.log('üéØ –¢–µ–ø–µ—Ä—å setTimeout –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∞');
          console.log('üìù –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ backend —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ setTimeout');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
      }, 3000);
      
    } else {
      const errorText = await startResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', errorText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', error);
  }
}

restartScannerWithLogging();