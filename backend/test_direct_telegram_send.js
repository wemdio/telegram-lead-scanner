const axios = require('axios');

async function testDirectTelegramSend() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram API...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    const settingsResponse = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:', settingsResponse.data);

    const { botToken, channelId } = settingsResponse.data;

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥
    const testLead = {
      id: 'test-lead-' + Date.now(),
      name: 'Test Lead Direct',
      author: 'Test Author',
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏',
      timestamp: new Date().toISOString(),
      sent: false
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥ –Ω–∞–ø—Ä—è–º—É—é...');
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
      botToken: botToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
      channelId: channelId,
      leadName: testLead.name
    });

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ —á–µ—Ä–µ–∑ API
    const url = 'http://localhost:3001/api/telegram-bot/send-lead-notification';
    console.log('üåê URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', url);
    
    const requestData = {
      botToken: botToken,
      channelId: channelId,
      lead: testLead
    };
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
      ...requestData,
      botToken: botToken ? `${botToken.substring(0, 10)}...` : '–Ω–µ—Ç'
    });

    const response = await axios.post(url, requestData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    console.log('–û—Ç–≤–µ—Ç:', response.data);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.log('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.headers);
    } else if (error.request) {
      console.log('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      console.log('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.request);
    } else {
      console.log('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
  }
}

testDirectTelegramSend();