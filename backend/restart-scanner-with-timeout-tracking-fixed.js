const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function restartScannerWithTimeoutTracking() {
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–æ–≤...');
  
  try {
    // 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä...');
    const stopResponse = await axios.post(`${BASE_URL}/scanner/stop`);
    console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', stopResponse.data);
    
    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...');
    const chatsResponse = await axios.get(`${BASE_URL}/telegram/chats`);
    const chats = chatsResponse.data.chats || [];
    
    if (chats.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const selectedChats = chats.slice(0, 3).map(chat => chat.id);
    console.log('üì± –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', selectedChats);
    
    // 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä...');
    const startPayload = {
      scanInterval: 1, // 1 —á–∞—Å
      selectedChats: selectedChats
    };
    
    const startResponse = await axios.post(`${BASE_URL}/scanner/start`, startPayload);
    console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω:', startResponse.data);
    
    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    console.log('‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–π–º–µ—Ä–∞—Ö
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–æ–≤...');
    const statusResponse = await axios.get(`${BASE_URL}/scanner/status`);
    const status = statusResponse.data;
    
    console.log('\nüìã –°–¢–ê–¢–£–° –°–ö–ê–ù–ï–†–ê:');
    console.log('üîÑ –†–∞–±–æ—Ç–∞–µ—Ç:', status.isRunning);
    console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', status.lastScan);
    console.log('‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', status.nextScan);
    console.log('üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:', status.activeTimeouts || 0);
    
    if (status.timeoutDetails && status.timeoutDetails.length > 0) {
      console.log('\n‚è≤Ô∏è –î–ï–¢–ê–õ–ò –ê–ö–¢–ò–í–ù–´–• –¢–ê–ô–ú–ï–†–û–í:');
      status.timeoutDetails.forEach((timeout, index) => {
        console.log(`  ${index + 1}. ID: ${timeout.id}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${new Date(timeout.createdAt).toLocaleString()}`);
        console.log(`     –°—Ä–∞–±–æ—Ç–∞–µ—Ç: ${new Date(timeout.expectedTriggerAt).toLocaleString()}`);
        console.log(`     –û—Å—Ç–∞–ª–æ—Å—å: ${Math.round(timeout.timeRemaining / 1000)} —Å–µ–∫—É–Ω–¥`);
      });
    }
    
    console.log('\n‚úÖ –°–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–æ–≤!');
    
    if (status.nextScan) {
      const nextScanTime = new Date(status.nextScan);
      const autoAnalysisTime = new Date(nextScanTime.getTime() + 2 * 60 * 1000);
      console.log(`\nüîÆ –ü–†–û–ì–ù–û–ó:`);
      console.log(`   üìä –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${nextScanTime.toLocaleString()}`);
      console.log(`   ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${autoAnalysisTime.toLocaleString()}`);
      console.log(`   ‚è±Ô∏è –î–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ${Math.round((autoAnalysisTime.getTime() - Date.now()) / 1000)} —Å–µ–∫—É–Ω–¥`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', error.message);
    if (error.response) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

restartScannerWithTimeoutTracking();