const fs = require('fs');
const path = require('path');

async function monitorAutoAnalysis() {
  console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞...\n');
  
  let checkCount = 0;
  const maxChecks = 15; // 15 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 10 —Å–µ–∫—É–Ω–¥ = 2.5 –º–∏–Ω—É—Ç—ã
  
  const startTime = new Date();
  console.log(`‚è∞ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${startTime.toLocaleTimeString()}`);
  console.log('üìä –†—É—á–Ω–æ–π —Å–∫–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: 01:59:59');
  console.log('üéØ –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 02:01:59)\n');

  const interval = setInterval(async () => {
    checkCount++;
    const currentTime = new Date();
    
    try {
      console.log(`\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${checkCount}/${maxChecks} - ${currentTime.toLocaleTimeString()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
      const leadsResponse = await fetch('http://localhost:3001/api/leads');
      const leadsData = await leadsResponse.json();
      const leads = leadsData.leads || [];
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: ${leads.length}`);
      
      if (leads.length > 0) {
        console.log('\nüéâ –ê–í–¢–û–ê–ù–ê–õ–ò–ó –°–†–ê–ë–û–¢–ê–õ! –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–¥—ã:');
        leads.slice(0, 5).forEach((lead, index) => {
          console.log(`  ${index + 1}. ${lead.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} - ${lead.reason || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${new Date(lead.createdAt).toLocaleTimeString()}`);
        });
        
        clearInterval(interval);
        console.log('\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω - –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
      const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
      const status = await statusResponse.json();
      
      console.log(`  - –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${status.isRunning}`);
      console.log(`  - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω: ${new Date(status.lastScan).toLocaleTimeString()}`);
      console.log(`  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${status.totalMessages}`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
      const lastScanTime = new Date(status.lastScan);
      const expectedAnalysisTime = new Date(lastScanTime.getTime() + 2 * 60 * 1000); // +2 –º–∏–Ω—É—Ç—ã
      const timeUntilAnalysis = expectedAnalysisTime.getTime() - currentTime.getTime();
      
      if (timeUntilAnalysis > 0) {
        const secondsLeft = Math.floor(timeUntilAnalysis / 1000);
        console.log(`  ‚è≥ –î–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ${secondsLeft} —Å–µ–∫—É–Ω–¥`);
      } else {
        console.log(`  ‚ö†Ô∏è –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å ${Math.abs(Math.floor(timeUntilAnalysis / 1000))} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥`);
      }
      
      if (checkCount >= maxChecks) {
        console.log('\n‚ùå –ê–í–¢–û–ê–ù–ê–õ–ò–ó –ù–ï –°–†–ê–ë–û–¢–ê–õ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
        console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. setTimeout –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∞');
        console.log('2. –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ triggerAutomaticAnalysis()');
        console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ —Å OpenRouter API –∫–ª—é—á–æ–º');
        console.log('4. –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        console.log('5. –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
        
        console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OpenRouter API –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö');
        
        clearInterval(interval);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${checkCount}: ${error.message}`);
      
      if (checkCount >= maxChecks) {
        clearInterval(interval);
      }
    }
  }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

monitorAutoAnalysis();