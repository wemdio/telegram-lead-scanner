// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º
// –ü—Ä–æ–±–ª–µ–º–∞: globalSettings –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–∑ persistent-settings.json

const fs = require('fs');
const path = require('path');

async function fixAutoAnalysis() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º...\n');

  try {
    // 1. –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    const settingsPath = path.join(__dirname, 'persistent-settings.json');
    const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
    
    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:');
    console.log(`  - openrouterApiKey: ${settings.openrouterApiKey ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - leadCriteria: ${settings.leadCriteria || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - selectedChats: ${settings.selectedChats?.length || 0} —á–∞—Ç–æ–≤`);
    console.log(`  - scanInterval: ${settings.scanInterval || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI —á–µ—Ä–µ–∑ API
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –≤ globalSettings...');
    
    const updateResponse = await fetch('http://localhost:3001/api/scanner/update-ai-settings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        openrouterApiKey: settings.openrouterApiKey,
        leadCriteria: settings.leadCriteria,
        spreadsheetId: settings.spreadsheetId,
        sheetsConfig: settings.sheetsConfig
      })
    });

    if (updateResponse.ok) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ globalSettings');
    } else {
      const errorText = await updateResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', errorText);
      return;
    }

    // 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    const stopResponse = await fetch('http://localhost:3001/api/scanner/stop', {
      method: 'POST'
    });
    
    if (stopResponse.ok) {
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const startResponse = await fetch('http://localhost:3001/api/scanner/start', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        scanInterval: settings.scanInterval,
        selectedChats: settings.selectedChats,
        telegramConfig: settings.telegramConfig,
        sheetsConfig: settings.sheetsConfig,
        spreadsheetId: settings.spreadsheetId,
        openrouterApiKey: settings.openrouterApiKey,
        leadCriteria: settings.leadCriteria
      })
    });

    if (startResponse.ok) {
      const result = await startResponse.json();
      console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
      console.log(`‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${result.nextScan}`);
    } else {
      const errorText = await startResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', errorText);
      return;
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞...');
    
    const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
    const status = await statusResponse.json();
    
    console.log('üìà –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:');
    console.log(`  - –†–∞–±–æ—Ç–∞–µ—Ç: ${status.isRunning}`);
    console.log(`  - OpenRouter API –∫–ª—é—á: ${status.openrouterApiKey ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏–¥–æ–≤: ${status.leadCriteria || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
    console.log(`  - –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${status.nextScan}`);

    if (status.openrouterApiKey && status.leadCriteria) {
      console.log('\n‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
      console.log('üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω OpenRouter API');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ globalSettings');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

fixAutoAnalysis();