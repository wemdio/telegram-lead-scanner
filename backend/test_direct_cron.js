const axios = require('axios');

async function testDirectCron() {
  console.log('üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç cron –∑–∞–¥–∞—á–∏...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    console.log('–õ–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ:', leadsResponse.data.total);
    
    if (leadsResponse.data.leads && leadsResponse.data.leads.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 3 –ª–∏–¥–∞:');
      leadsResponse.data.leads.slice(0, 3).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name} - ${lead.message.substring(0, 50)}... (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent})`);
      });
    }

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n2. –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç cron –∑–∞–¥–∞—á–∏:', JSON.stringify(cronResponse.data, null, 2));

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ cron...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    console.log('–õ–∏–¥—ã –ø–æ—Å–ª–µ cron:', leadsAfterResponse.data.total);
    
    if (leadsAfterResponse.data.leads && leadsAfterResponse.data.leads.length > 0) {
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤:');
      leadsAfterResponse.data.leads.forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent}`);
      });
    }

    console.log('\n‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testDirectCron();