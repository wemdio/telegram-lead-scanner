const axios = require('axios');

async function testUpdatedCron() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sendNewLeadsToTelegram...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
    const sheetsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets:', sheetsResponse.data);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram...');
    const telegramResponse = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:', telegramResponse.data);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    const leads = leadsResponse.data.leads;
    console.log(`–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leads.length}`);
    
    const unsentLeads = leads.filter(lead => lead.sent !== true);
    console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${unsentLeads.length}`);
    
    if (unsentLeads.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 3 –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–∞:');
      unsentLeads.slice(0, 3).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name || 'undefined'} - sent: ${lead.sent}, id: ${lead.id}`);
      });
    }

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤
    console.log('\n4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç cron –∑–∞–¥–∞—á–∏:', JSON.stringify(cronResponse.data, null, 2));

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const leadsAfterResponse = await axios.get('http://localhost:3001/api/leads');
    const leadsAfter = leadsAfterResponse.data.leads;
    console.log(`–õ–∏–¥—ã –ø–æ—Å–ª–µ cron: ${leadsAfter ? leadsAfter.length : 0}`);
    
    if (leadsAfter && leadsAfter.length > 0) {
      const sentLeads = leadsAfter.filter(lead => lead.sent === true);
      const stillUnsentLeads = leadsAfter.filter(lead => lead.sent !== true);
      
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${sentLeads.length}`);
      console.log(`–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤: ${stillUnsentLeads.length}`);
      
      if (sentLeads.length > 0) {
        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:');
        sentLeads.slice(0, 3).forEach((lead, index) => {
          console.log(`  ${index + 1}. ${lead.name || 'undefined'} - sent: ${lead.sent}`);
        });
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

testUpdatedCron();