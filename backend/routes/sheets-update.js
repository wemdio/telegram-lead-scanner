const express = require('express');
const router = express.Router();
const GoogleSheetsService = require('../services/googleSheetsService');
const axios = require('axios');

let sheetsClient = null;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ Google Sheets
router.post('/update-lead-sent', async (req, res) => {
  try {
    const { spreadsheetId, leadIndex, sent } = req.body;

    if (!spreadsheetId || !leadIndex) {
      return res.status(400).json({ 
        error: 'spreadsheetId –∏ leadIndex –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!sheetsClient || !sheetsClient.isInitialized()) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API
        console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
        const settingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
        const settings = settingsResponse.data;
        console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', { 
          hasEmail: !!settings.serviceAccountEmail, 
          hasKey: !!settings.privateKey,
          emailStart: settings.serviceAccountEmail?.substring(0, 20) + '...'
        });
        
        if (!settings.serviceAccountEmail || !settings.privateKey) {
          console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
          return res.status(400).json({ 
            error: 'Google Sheets API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–ø–æ–ª–Ω—ã–º –∫–ª—é—á–æ–º
        if (settings.privateKey.includes('...') || (settings.privateKey.length < 100 && !settings.privateKey.startsWith('MOCK_'))) {
          console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á');
          return res.status(400).json({ 
            error: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ Google Sheets API –∫–ª—é—á–∏' 
          });
        }

        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GoogleSheetsService...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!sheetsClient) {
          sheetsClient = new GoogleSheetsService();
        }
        
        try {
          const initResult = await sheetsClient.initialize(settings.serviceAccountEmail, settings.privateKey);
          console.log('‚úÖ Google Sheets –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', initResult);
          
          // –í mock —Ä–µ–∂–∏–º–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞
          if (!initResult.mock && !sheetsClient.sheetsClient) {
            throw new Error('sheetsClient –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          }
          
          if (initResult.mock) {
            console.log('‚úÖ –†–∞–±–æ—Ç–∞–µ–º –≤ mock —Ä–µ–∂–∏–º–µ');
          } else {
            console.log('‚úÖ sheetsClient.sheetsClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
          }
        } catch (initError) {
          console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initError);
          throw initError;
        }
      } catch (authError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets –∫–ª–∏–µ–Ω—Ç–∞:', authError.message);
        console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', authError);
        return res.status(400).json({ 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets API' 
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ Google Sheets
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ ${leadIndex} –≤ —Ç–∞–±–ª–∏—Ü–µ ${spreadsheetId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –≤ mock —Ä–µ–∂–∏–º–µ
      if (sheetsClient && sheetsClient.isMockMode && sheetsClient.isMockMode()) {
        console.log('‚úÖ Mock —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞');
        return res.json({ 
          success: true, 
          message: '–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω (mock —Ä–µ–∂–∏–º)',
          mock: true 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞
      if (!sheetsClient || !sheetsClient.sheetsClient || !sheetsClient.sheetsClient.spreadsheets) {
        throw new Error('Google Sheets API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ updateCell
      // leadIndex —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—Å —É—á–µ—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞)
      const cellRange = `H${leadIndex}`; // –ö–æ–ª–æ–Ω–∫–∞ H –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
      const result = await sheetsClient.updateCell(
        spreadsheetId, 
        '–õ–∏–¥—ã', 
        cellRange, 
        sent ? '–î–∞' : '–ù–µ—Ç'
      );

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', result);
      res.json({ 
        success: true, 
        message: '–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
        result 
      });
      
    } catch (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞:', updateError);
      res.status(500).json({ 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞',
        message: updateError.message 
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞', 
      message: error.message 
    });
  }
});

module.exports = router;