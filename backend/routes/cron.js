const express = require('express');
const cron = require('node-cron');
const axios = require('axios');
const { getGoogleSheetsClient } = require('../services/googleSheetsService');

const router = express.Router();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è cron job
let cronJob = null;
let isRunning = false;
let lastRun = null;
let nextRun = null;
const scheduleDescription = '–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–≤ 0 –∏ 30 –º–∏–Ω—É—Ç)';

function computeNextRun(fromDate = new Date()) {
  const d = new Date(fromDate);
  d.setSeconds(0, 0);
  const minutes = d.getMinutes();
  if (minutes < 30) {
    d.setMinutes(30);
  } else {
    d.setMinutes(0);
    d.setHours(d.getHours() + 1);
  }
  return d;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –≤ Telegram
async function sendNewLeadsToTelegram() {
  let sentCount = 0;
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –≤ Telegram...');
    
    let spreadsheetId;
    let botToken, channelId;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
    try {
      const settingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
      if (settingsResponse.data.success) {
        spreadsheetId = settingsResponse.data.spreadsheetId;
        console.log('üìä –ü–æ–ª—É—á–µ–Ω spreadsheetId –∏–∑ localStorage');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å spreadsheetId –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ spreadsheetId –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error.message);
      spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
    }
    
    if (!spreadsheetId) {
      console.log('‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω spreadsheetId, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      // –í mock —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π spreadsheetId
      spreadsheetId = 'mock_spreadsheet_id_12345';
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TG" –≤ Google Sheets
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ credentials
    let sheetSettingsFound = false;
    
    try {
      console.log('üìã –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TG"...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ localStorage –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É
      try {
        const baseSettingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
        if (baseSettingsResponse.data.success) {
          const { serviceAccountEmail, privateKey } = baseSettingsResponse.data;
          
          const baseInitResponse = await axios.post('http://localhost:3001/api/sheets/auto-initialize', {
            googleServiceAccountEmail: serviceAccountEmail,
            googlePrivateKey: privateKey,
            googleSpreadsheetId: spreadsheetId
          });
          
          if (baseInitResponse.data.success) {
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
          }
        }
      } catch (baseInitError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', baseInitError.message);
      }
      
      const sheetSettingsResponse = await axios.get(`http://localhost:3001/api/sheets/settings/${spreadsheetId}`);
      
      if (sheetSettingsResponse.data.success && sheetSettingsResponse.data.settings) {
        const settings = sheetSettingsResponse.data.settings;
        botToken = settings.telegramBotToken;
        channelId = settings.telegramChannelId;
        sheetSettingsFound = true;
        
        // –ï—Å–ª–∏ –≤ –ª–∏—Å—Ç–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (settings.serviceAccountEmail && settings.privateKey) {
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –∏–∑ –ª–∏—Å—Ç–∞...');
          try {
            const updateResponse = await axios.post('http://localhost:3001/api/settings/google-sheets', {
              serviceAccountEmail: settings.serviceAccountEmail,
              privateKey: settings.privateKey,
              spreadsheetId: spreadsheetId
            });
            
            if (updateResponse.data.success) {
              console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞');
              
              // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ª–∏—Å—Ç–∞
              const reinitResponse = await axios.post('http://localhost:3001/api/sheets/auto-initialize', {
                googleServiceAccountEmail: settings.serviceAccountEmail,
                googlePrivateKey: settings.privateKey,
                googleSpreadsheetId: spreadsheetId
              });
              
              if (reinitResponse.data.success) {
                console.log('‚úÖ Google Sheets –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ª–∏—Å—Ç–∞');
              }
            }
          } catch (updateError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets:', updateError.message);
          }
        }
        
        console.log('üì± –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ –ª–∏—Å—Ç–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TG"');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞');
        throw new Error('Settings not found in sheet');
      }
    } catch (sheetError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', sheetError.message);
      sheetSettingsFound = false;
    }
    
    // Fallback –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ localStorage –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–∏—Å—Ç–∞
    if (!sheetSettingsFound) {
      try {
        const settingsResponse = await axios.get('http://localhost:3001/api/settings/telegram');
        if (settingsResponse.data.success) {
          botToken = settingsResponse.data.botToken;
          channelId = settingsResponse.data.channelId;
          console.log('üì± –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –∏–∑ localStorage');
        } else {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          botToken = process.env.TELEGRAM_BOT_TOKEN;
          channelId = process.env.TELEGRAM_CHANNEL_ID;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error.message);
        botToken = process.env.TELEGRAM_BOT_TOKEN;
        channelId = process.env.TELEGRAM_CHANNEL_ID;
      }
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ localStorage
      try {
        const settingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
        if (settingsResponse.data.success) {
          const { serviceAccountEmail, privateKey } = settingsResponse.data;
          
          const autoInitResponse = await axios.post('http://localhost:3001/api/sheets/auto-initialize', {
            googleServiceAccountEmail: serviceAccountEmail,
            googlePrivateKey: privateKey,
            googleSpreadsheetId: spreadsheetId
          });
          
          if (autoInitResponse.data.success) {
            console.log('‚úÖ Google Sheets –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ localStorage');
          }
        }
      } catch (initError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', initError.message);
      }
    }
    
    if (!botToken || !channelId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞');
      return { sentCount: 0 };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API
    const response = await axios.get(`http://localhost:3001/api/leads`);
    const leads = response.data.leads;
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API: ${leads ? leads.length : 'undefined'}`);
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ª–∏–¥–∞:', leads && leads.length > 0 ? JSON.stringify(leads[0], null, 2) : '–Ω–µ—Ç –ª–∏–¥–æ–≤');
    
    if (!leads || leads.length === 0) {
      console.log('üì≠ –ù–µ—Ç –ª–∏–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º API');
      return { sentCount: 0 };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã (sent === false –∏–ª–∏ sent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞
    const newLeads = leads.map((lead, originalIndex) => ({
      ...lead,
      originalIndex: originalIndex
    })).filter(lead => lead.sent !== true);
    
    console.log(`üîç –õ–∏–¥–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${newLeads.length}`);
    console.log('üìã –ü–µ—Ä–≤—ã–π –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥:', newLeads.length > 0 ? JSON.stringify(newLeads[0], null, 2) : '–Ω–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤');
    
    if (newLeads.length === 0) {
      console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return { sentCount: 0 };
    }
    
    console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ ${newLeads.length} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ª–∏–¥–æ–≤
    const duplicateCheck = checkForDuplicateLeads(newLeads);
    const leadsToSend = duplicateCheck.uniqueLeads;
    
    if (duplicateCheck.duplicateCount > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicateCheck.duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã`);
    }
    
    if (leadsToSend.length === 0) {
      console.log('üì≠ –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
      return { sentCount: 0 };
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${leadsToSend.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–∏–¥ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
    for (let i = 0; i < leadsToSend.length; i++) {
      const lead = leadsToSend[i];
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ Telegram
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ ${i + 1}/${leadsToSend.length}:`, {
          name: lead.name,
          channel: lead.channel,
          timestamp: lead.timestamp,
          sent: lead.sent
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ rate limiting
        const sendWithRetry = async (retryCount = 0) => {
          try {
            const telegramResponse = await axios.post('http://localhost:3001/api/telegram-bot/send-lead-notification', {
              botToken: botToken,
              channelId: channelId,
              lead: lead
            });
            return telegramResponse;
          } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É rate limiting
            if (error.response && error.response.status === 400 && 
                error.response.data && error.response.data.error && 
                error.response.data.error.includes('Too Many Requests')) {
              
              if (retryCount < 3) { // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                const waitTime = Math.min(30000, (retryCount + 1) * 15000); // 15, 30, 30 —Å–µ–∫—É–Ω–¥
                console.log(`‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∂–¥–µ–º ${waitTime/1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/3)...`);
                
                await new Promise(resolve => setTimeout(resolve, waitTime));
                return await sendWithRetry(retryCount + 1);
              } else {
                console.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ª–∏–¥–∞ ${i + 1}`);
                throw error;
              }
            } else {
              throw error;
            }
          }
        };
        
        const telegramResponse = await sendWithRetry();
        
        console.log(`üì® –û—Ç–≤–µ—Ç Telegram API –¥–ª—è –ª–∏–¥–∞ ${i + 1}:`, telegramResponse.data);
        
        if (telegramResponse.data.success) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é markLeadAsSent –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
          try {
            await markLeadAsSent(lead, spreadsheetId);
            console.log(`‚úÖ –õ–∏–¥ ${lead.originalIndex + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π`);
            sentCount++;
          } catch (markError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ª–∏–¥–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ:`, markError.message);
            // –í—Å–µ —Ä–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ –ª–∏–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram
            sentCount++;
          }
        } else {
          console.log(`‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ª–∏–¥–∞ ${i + 1}`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits (1.5 —Å–µ–∫—É–Ω–¥—ã)
        if (i < leadsToSend.length - 1) { // –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏–¥–∞
          console.log(`‚è≥ –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–∏–¥–∞...`);
          await new Promise(resolve => setTimeout(resolve, 1500));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏–¥–∞ ${i + 1}:`, error.message);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        if (i < leadsToSend.length - 1) {
          console.log(`‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}`);
    return { sentCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤:', error.message);
    return { sentCount };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ Telegram –∫–∞–Ω–∞–ª
async function sendLeadToTelegramChannel(lead, botToken, channelId) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç telegram-bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤
  const response = await fetch('http://localhost:3001/api/telegram-bot/send-lead-notification', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      lead: lead,
      botToken: botToken,
      channelId: channelId
    })
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Telegram API error: ${errorData.error || 'Unknown error'}`);
  }

  return await response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ª–∏–¥–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
async function markLeadAsSent(lead, spreadsheetId) {
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if (lead.originalIndex !== undefined) {
      console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∏–Ω–¥–µ–∫—Å: ${lead.originalIndex})`);
      
      const internalUpdateResponse = await axios.post('http://localhost:3001/api/leads/update-sent', {
        leadId: lead.originalIndex,
        sent: true
      });

      if (internalUpdateResponse.data.success) {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      } else {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', internalUpdateResponse.data);
      }
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets (–µ—Å–ª–∏ –µ—Å—Ç—å spreadsheetId)
    if (spreadsheetId) {
      console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ Google Sheets (spreadsheetId: ${spreadsheetId})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞
      const updateResponse = await axios.post('http://localhost:3001/api/sheets/update-lead-sent', {
        spreadsheetId: spreadsheetId,
        leadIndex: lead.originalIndex + 1, // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ Sheets –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1, –ø–ª—é—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —É—á—Ç–µ–Ω
        sent: true
      });

      if (updateResponse.data.success) {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets');
      } else {
        console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', updateResponse.data);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ Google Sheets: ${updateResponse.data.error || 'Unknown error'}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ª–∏–¥–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ cron job (–∫–∞–∂–¥—ã–π —á–∞—Å)
router.post('/start', (req, res) => {
  try {
    if (cronJob) {
      cronJob.stop();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç: –≤ 0 –∏ 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    cronJob = cron.schedule('0,30 * * * *', async () => {
      lastRun = new Date();
      try {
        await sendNewLeadsToTelegram();
      } finally {
        nextRun = computeNextRun(new Date());
      }
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    cronJob.start();
    nextRun = computeNextRun(new Date());
    
    console.log('‚è∞ Cron job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)');
    
    res.json({ 
      success: true, 
      message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)',
      schedule: scheduleDescription,
      nextRun: nextRun ? nextRun.toISOString() : null
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cron job:', error);
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É' 
    });
  }
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron job
router.post('/stop', (req, res) => {
  try {
    if (cronJob) {
      cronJob.stop();
      cronJob = null;
      nextRun = null;
      console.log('‚èπÔ∏è Cron job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    res.json({ 
      success: true, 
      message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ cron job:', error);
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É' 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ cron job
router.get('/status', (req, res) => {
  const running = cronJob && cronJob.running;
  console.log('üìä –°—Ç–∞—Ç—É—Å cron job:', { cronJob: !!cronJob, running, lastRun, nextRun });
  res.json({ 
    success: true,
    running,
    schedule: running ? scheduleDescription : '–ù–µ –∑–∞–ø—É—â–µ–Ω–æ',
    lastRun: lastRun ? lastRun.toISOString() : null,
    nextRun: nextRun ? nextRun.toISOString() : null
  });
});

// –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤
router.post('/send-new-leads', async (req, res) => {
  try {
    const result = await sendNewLeadsToTelegram();
    res.json({ 
      success: true, 
      message: '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      sentCount: result.sentCount
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–¥–æ–≤',
      sentCount: 0
    });
  }
});

module.exports = router;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ª–∏–¥–æ–≤
function checkForDuplicateLeads(newLeads) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ª–∏–¥–æ–≤...');
  
  const uniqueLeads = [];
  const duplicates = [];
  const seenLeads = new Set();
  
  for (const lead of newLeads) {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ª–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–Ω–∞–ª–∞, –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const leadKey = `${lead.name || 'unknown'}_${lead.channel || 'unknown'}_${lead.timestamp || 'unknown'}_${lead.message || ''}`;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥: ${lead.name} –∏–∑ ${lead.channel} (${lead.timestamp})`);
    console.log(`üîë –ö–ª—é—á –ª–∏–¥–∞: ${leadKey.substring(0, 100)}...`);
    
    if (seenLeads.has(leadKey)) {
      duplicates.push(lead);
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ª–∏–¥–∞: ${lead.name} - ${(lead.message || '').substring(0, 50)}...`);
    } else {
      seenLeads.add(leadKey);
      uniqueLeads.push(lead);
      console.log(`‚úÖ –õ–∏–¥ —É–Ω–∏–∫–∞–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
    }
  }
  
  console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: ${uniqueLeads.length}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
  
  return {
    uniqueLeads,
    duplicates,
    duplicateCount: duplicates.length
  };
}