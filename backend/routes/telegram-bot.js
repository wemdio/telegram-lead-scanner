const express = require('express');
const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
const sendTelegramMessage = async (botToken, chatId, message, parseMode = 'HTML', replyMarkup = null) => {
  try {
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const body = {
      chat_id: chatId,
      text: message,
      parse_mode: parseMode,
      disable_web_page_preview: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (replyMarkup) {
      body.reply_markup = replyMarkup;
    }
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body)
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${result.description || 'Unknown error'}`);
    }

    return { success: true, data: result };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return { success: false, error: error.message };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
const testBotConnection = async (botToken, chatId) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfoUrl = `https://api.telegram.org/bot${botToken}/getMe`;
    const botInfoResponse = await fetch(botInfoUrl);
    const botInfo = await botInfoResponse.json();
    
    if (!botInfoResponse.ok) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ${botInfo.description || 'Unknown error'}`);
    }

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = `ü§ñ <b>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n–ë–æ—Ç <b>${botInfo.result.first_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É!\n\n<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</i>`;
    
    const sendResult = await sendTelegramMessage(botToken, chatId, testMessage);
    
    if (!sendResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: ${sendResult.error}`);
    }

    return { 
      success: true, 
      botInfo: botInfo.result,
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', error);
    return { success: false, error: error.message };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ
const formatLeadMessage = (lead) => {
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ confidence
  const confidence = lead.confidence ? `${lead.confidence}%` : '–ù–µ —É–∫–∞–∑–∞–Ω';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  let formattedDate = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  if (lead.timestamp) {
    try {
      let date;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "DD.MM.YYYY HH:MM:SS MSK" –∏–∑ scanner.js
      if (/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2} MSK$/.test(lead.timestamp)) {
        const match = lead.timestamp.match(/^(\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2}):(\d{2}) MSK$/);
        if (match) {
          const [, day, month, year, hours, minutes, seconds] = match;
          // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
          date = new Date(`${year}-${month}-${day}T${hours}:${minutes}:${seconds}+03:00`);
        }
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        date = new Date(lead.timestamp);
      }
      
      if (date && !isNaN(date.getTime())) {
        formattedDate = date.toLocaleString('ru-RU', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å @ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  const username = lead.name || lead.username || '–ù–µ —É–∫–∞–∑–∞–Ω';
  const formattedUsername = username !== '–ù–µ —É–∫–∞–∑–∞–Ω' && !username.startsWith('@') ? `@${username}` : username;
  
  return `üéØ <b>–ù–æ–≤—ã–π –ª–∏–¥ –Ω–∞–π–¥–µ–Ω!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${formattedUsername}
üì± <b>–ö–∞–Ω–∞–ª:</b> ${lead.channel || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ <b>–í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è:</b> ${formattedDate}
üéØ <b>–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:</b> ${confidence}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–∞:</b>
<code>${lead.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>

ü§ñ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ AI:</b>
<i>${lead.reasoning || lead.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>`;
};

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
router.post('/test', async (req, res) => {
  try {
    const { botToken, channelId } = req.body;

    if (!botToken || !channelId) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞'
      });
    }

    const result = await testBotConnection(botToken, channelId);
    
    if (result.success) {
      res.json({
        success: true,
        message: result.message,
        botInfo: result.botInfo
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ
router.post('/send-lead-notification', async (req, res) => {
  try {
    const { botToken, channelId, lead } = req.body;

    console.log('üì§ [DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–¥–∞:', {
      botToken: botToken ? `${botToken.substring(0, 10)}...` : '–Ω–µ—Ç',
      channelId: channelId,
      leadId: lead?.id,
      leadName: lead?.name
    });

    if (!botToken || !channelId || !lead) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, ID –∫–∞–Ω–∞–ª–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ mock —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ mock –∑–Ω–∞—á–µ–Ω–∏—è
    const isMockBotToken = !botToken ||
                          botToken === 'mock' ||
                          botToken === 'test_bot_token' ||
                          botToken === 'your_bot_token_here' ||
                          botToken === 'mock_bot_token_12345';

    const isMockChannelId = !channelId ||
                           channelId === 'mock' ||
                           channelId === 'test_channel_id' ||
                           channelId === 'your_channel_id_here' ||
                           channelId === 'mock_channel_id_67890';

    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ mock —Ä–µ–∂–∏–º–∞:', {
      botToken: botToken,
      channelId: channelId,
      isMockBotToken: isMockBotToken,
      isMockChannelId: isMockChannelId,
      willUseMock: isMockBotToken || isMockChannelId
    });

    if (isMockBotToken || isMockChannelId) {
      // Mock —Ä–µ–∂–∏–º - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      console.log('üì§ [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Telegram –∫–∞–Ω–∞–ª:', {
        botToken: botToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        channelId: channelId,
        leadName: lead.name || lead.author || lead.firstName,
        leadId: lead.id
      });

      const message = formatLeadMessage(lead);
      console.log('üìù [MOCK] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 100) + '...');

      return res.json({
        success: true,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª (MOCK —Ä–µ–∂–∏–º)',
        telegramMessageId: Math.floor(Math.random() * 1000000), // –°–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è mock
        mockMode: true
      });
    }

    const message = formatLeadMessage(lead);
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –ª–∏–¥–æ–º
    const replyMarkup = {
      inline_keyboard: [[
        {
          text: "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
          url: lead.username ? `https://t.me/${lead.username.replace('@', '')}` : `tg://user?id=${lead.userId || ''}`
        }
      ]]
    };
    
    const result = await sendTelegramMessage(botToken, channelId, message, 'HTML', replyMarkup);
    
    if (result.success) {
      res.json({
        success: true,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª',
        telegramMessageId: result.data.result.message_id
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;