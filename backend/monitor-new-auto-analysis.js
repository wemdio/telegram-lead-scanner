const fetch = require('node-fetch');

async function monitorAutoAnalysis() {
  console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleTimeString());
  
  let checkCount = 0;
  const maxChecks = 20; // 20 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 10 —Å–µ–∫—É–Ω–¥ = 3.3 –º–∏–Ω—É—Ç—ã
  
  const checkInterval = setInterval(async () => {
    checkCount++;
    const currentTime = new Date().toLocaleTimeString();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
      const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
      const status = await statusResponse.json();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
      const leadsResponse = await fetch('http://localhost:3001/api/leads');
      const leads = await leadsResponse.json();
      const leadCount = Array.isArray(leads) ? leads.length : 0;
      
      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ${checkCount}/${maxChecks} –≤ ${currentTime}:`);
      console.log(`  üéØ –õ–∏–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${leadCount}`);
      console.log(`  üîÑ –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${status.isRunning}`);
      console.log(`  üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω: ${status.lastScan ? new Date(status.lastScan).toLocaleTimeString() : '–Ω–µ—Ç'}`);
      console.log(`  ‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Å–∫–∞–Ω: ${status.nextScan ? new Date(status.nextScan).toLocaleTimeString() : '–Ω–µ—Ç'}`);
      
      if (status.lastScan) {
        const lastScanTime = new Date(status.lastScan);
        const now = new Date();
        const timeSinceLastScan = Math.floor((now - lastScanTime) / 1000);
        const timeUntilAutoAnalysis = 120 - timeSinceLastScan; // 2 –º–∏–Ω—É—Ç—ã = 120 —Å–µ–∫—É–Ω–¥
        
        if (timeUntilAutoAnalysis > 0) {
          console.log(`  ‚è≥ –î–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ${timeUntilAutoAnalysis} —Å–µ–∫—É–Ω–¥`);
        } else {
          const overdue = Math.abs(timeUntilAutoAnalysis);
          console.log(`  ‚ö†Ô∏è –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å ${overdue} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥`);
          
          if (overdue > 30) {
            console.log('  ‚ùå –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞');
          }
        }
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (checkCount >= maxChecks) {
        console.log('\nüèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üìù –ï—Å–ª–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ:');
        console.log('   - "üïê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ setTimeout –¥–ª—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞..."');
        console.log('   - "‚è∞ setTimeout callback –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."');
        console.log('   - "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤..."');
        console.log('   - –õ—é–±—ã–µ –æ—à–∏–±–∫–∏ –≤ try-catch –±–ª–æ–∫–∞—Ö');
        clearInterval(checkInterval);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${checkCount}:`, error.message);
    }
  }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É
  try {
    const statusResponse = await fetch('http://localhost:3001/api/scanner/status');
    const status = await statusResponse.json();
    
    console.log('\nüìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:');
    console.log(`  üîÑ –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${status.isRunning}`);
    console.log(`  üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω: ${status.lastScan ? new Date(status.lastScan).toLocaleTimeString() : '–Ω–µ—Ç'}`);
    
    if (status.lastScan) {
      const lastScanTime = new Date(status.lastScan);
      const now = new Date();
      const timeSinceLastScan = Math.floor((now - lastScanTime) / 1000);
      const timeUntilAutoAnalysis = 120 - timeSinceLastScan;
      
      if (timeUntilAutoAnalysis > 0) {
        console.log(`  ‚è≥ –î–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ${timeUntilAutoAnalysis} —Å–µ–∫—É–Ω–¥`);
        console.log(`  üéØ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ${new Date(Date.now() + timeUntilAutoAnalysis * 1000).toLocaleTimeString()}`);
      } else {
        console.log(`  ‚ö†Ô∏è –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å ${Math.abs(timeUntilAutoAnalysis)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  }
}

monitorAutoAnalysis();