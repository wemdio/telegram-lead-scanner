const axios = require('axios');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
async function testDuplicateSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ª–∏–¥–æ–≤...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
    const settingsResponse = await axios.get('http://localhost:3001/api/settings/google-sheets');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets:', settingsResponse.data);
    
    if (!settingsResponse.data || !settingsResponse.data.spreadsheetId) {
      console.log('‚ùå spreadsheetId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await axios.post('http://localhost:3001/api/settings/google-sheets', {
        email: 'test@example.com',
        privateKey: 'test-key',
        spreadsheetId: 'test-spreadsheet-id'
      });
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–¥—ã
    console.log('\n2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–¥—ã –∏–∑ Google Sheets...');
    const leadsResponse = await axios.get('http://localhost:3001/api/leads');
    console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –ª–∏–¥–æ–≤:', leadsResponse.data);
    
    const leads = leadsResponse.data.leads || [];
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: ${leads.length}`);
    
    if (leads.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 3 –ª–∏–¥–∞:');
      leads.slice(0, 3).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.name} - ${lead.message?.substring(0, 50)}... (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lead.sent})`);
      });
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–¥–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–¥–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    const cronResponse = await axios.post('http://localhost:3001/api/cron/send-new-leads');
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤:');
    console.log(`  –£—Å–ø–µ—Ö: ${cronResponse.data.success}`);
    console.log(`  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏–¥–æ–≤: ${cronResponse.data.sentCount}`);
    console.log(`  –°–æ–æ–±—â–µ–Ω–∏–µ: ${cronResponse.data.message}`);
    
    if (cronResponse.data.details) {
      console.log('  –î–µ—Ç–∞–ª–∏:', cronResponse.data.details);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDuplicateSystem();