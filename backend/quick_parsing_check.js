const axios = require('axios');

async function quickParsingCheck() {
  console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
    console.log('1Ô∏è‚É£ –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:');
    const scannerStatus = await axios.get('http://localhost:3001/api/scanner/status');
    console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${scannerStatus.data.isScanning ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${scannerStatus.data.lastScanTime || '–ù–∏–∫–æ–≥–¥–∞'}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:');
    const scanHistory = await axios.get('http://localhost:3001/api/scanner/history');
    const history = scanHistory.data.history || [];
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${history.length}`);
    
    if (history.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
      history.slice(-3).forEach((scan, index) => {
        console.log(`     ${index + 1}. ${scan.timestamp}: ${scan.messagesProcessed || 0} —Å–æ–æ–±—â–µ–Ω–∏–π, ${scan.leadsFound || 0} –ª–∏–¥–æ–≤`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–æ–≤
    console.log('\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤:');
    const leadsStats = await axios.get('http://localhost:3001/api/leads/stats');
    console.log(`   –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${leadsStats.data.total || 0}`);
    console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${leadsStats.data.sent || 0}`);
    console.log(`   –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${leadsStats.data.unsent || 0}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã
    console.log('\n4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã:');
    const leads = await axios.get('http://localhost:3001/api/leads');
    const leadsData = leads.data.leads || [];
    console.log(`   –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –≤ –±–∞–∑–µ: ${leadsData.length}`);
    
    if (leadsData.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ª–∏–¥–∞:');
      leadsData.slice(-3).forEach((lead, index) => {
        const date = new Date(lead.timestamp).toLocaleString('ru-RU');
        console.log(`     ${index + 1}. ${date}: ${lead.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} - ${lead.sent ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}`);
      });
    }

    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –≤ –∫–æ–¥–µ
    console.log('\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –≤ –∫–æ–¥–µ:');
    console.log('   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã:');
    console.log('     ‚Ä¢ scanner.js: limit: 1000 (getMessagesOptions)');
    console.log('     ‚Ä¢ geminiService.js: MAX_MESSAGES = 1000');
    console.log('     ‚Ä¢ geminiService.js: —á–∞–Ω–∫–∏ –ø–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('     ‚Ä¢ geminiService.js: –∑–∞–¥–µ—Ä–∂–∫–∞ 500–º—Å –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏');
    console.log('     ‚Ä¢ telegramService.ts: limit: 100 (API –∑–∞–ø—Ä–æ—Å—ã)');
    console.log('     ‚Ä¢ telegram.js: limit –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100');

    // 6. –†–∞—Å—á–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤
    console.log('\n6Ô∏è‚É£ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã:');
    console.log('   üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å:');
    console.log('     ‚Ä¢ Telegram API: 1000 —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('     ‚Ä¢ AI –∞–Ω–∞–ª–∏–∑: 1000 —Å–æ–æ–±—â–µ–Ω–∏–π (10 —á–∞–Ω–∫–æ–≤ –ø–æ 100)');
    console.log('     ‚Ä¢ –í—Ä–µ–º—è AI –∞–Ω–∞–ª–∏–∑–∞: ~5 —Å–µ–∫—É–Ω–¥ (10 —á–∞–Ω–∫–æ–≤ √ó 500–º—Å)');
    console.log('   üìà –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º –≤ —á–∞—Å:');
    console.log('     ‚Ä¢ –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç: 12 √ó 1000 = 12,000 —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('     ‚Ä¢ –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∂–¥—ã–π —á–∞—Å: 1 √ó 1000 = 1,000 —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('   ‚ö†Ô∏è –ù–∞–±–ª—é–¥–∞–µ–º—ã–π –ª–∏–º–∏—Ç: ~1500 —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å');

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    console.log('\n7Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:');
    const telegramSettings = await axios.get('http://localhost:3001/api/settings/telegram');
    console.log(`   Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${telegramSettings.data.botToken ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   Channel ID: ${telegramSettings.data.channelId || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 1500 —Å–æ–æ–±—â–µ–Ω–∏–π:');
    console.log('   1. Telegram API rate limiting');
    console.log('   2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('   3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∫–æ–¥–µ (MAX_MESSAGES = 1000)');
    console.log('   4. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (offset_date)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

quickParsingCheck();