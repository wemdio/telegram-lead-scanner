async function checkFrontendSettings() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (–ø–æ—Ä—Ç 5173)
    console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (–ø–æ—Ä—Ç 5173):');
    try {
        const frontendResponse = await fetch('http://localhost:5173/api/settings/google-sheets');
        if (frontendResponse.ok) {
            const frontendData = await frontendResponse.json();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
                success: frontendData.success,
                hasServiceAccountEmail: !!frontendData.serviceAccountEmail,
                hasPrivateKey: !!frontendData.privateKey,
                hasSpreadsheetId: !!frontendData.spreadsheetId
            });
            if (frontendData.spreadsheetId) {
                console.log('üìä Spreadsheet ID —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', frontendData.spreadsheetId);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', frontendResponse.status);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É:', error.message);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–ø–æ—Ä—Ç 3001)
    console.log('\nüìã 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–ø–æ—Ä—Ç 3001):');
    try {
        const backendResponse = await fetch('http://localhost:3001/api/settings/google-sheets');
        if (backendResponse.ok) {
            const backendData = await backendResponse.json();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
                success: backendData.success,
                hasServiceAccountEmail: !!backendData.serviceAccountEmail,
                hasPrivateKey: !!backendData.privateKey,
                hasSpreadsheetId: !!backendData.spreadsheetId
            });
            if (backendData.spreadsheetId) {
                console.log('üìä Spreadsheet ID —Å –±—ç–∫–µ–Ω–¥–∞:', backendData.spreadsheetId);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –±—ç–∫–µ–Ω–¥–∞:', backendResponse.status);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É:', error.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\nüìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Sheets –∫–ª–∏–µ–Ω—Ç–∞:');
    try {
        const statusResponse = await fetch('http://localhost:3001/api/sheets/status');
        if (statusResponse.ok) {
            const statusData = await statusResponse.json();
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å Google Sheets –∫–ª–∏–µ–Ω—Ç–∞:', statusData);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', statusResponse.status);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–æ–≤
    console.log('\nüìã 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–æ–≤:');
    try {
        const headersResponse = await fetch('http://localhost:3001/api/sheets/headers', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                headers: [
                    'Timestamp',
                    'Chat Title', 
                    'Username',
                    'First Name',
                    'Last Name',
                    'User ID',
                    'Message',
                    'Chat ID',
                    'Message Type'
                ]
            })
        });
        if (headersResponse.ok) {
            const headersData = await headersResponse.json();
            console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–æ–≤:', headersData);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', headersResponse.status);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã
    console.log('\nüìã 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã:');
    try {
        const leadsResponse = await fetch('http://localhost:3001/api/leads');
        if (leadsResponse.ok) {
            const leadsData = await leadsResponse.json();
            console.log('‚úÖ –õ–∏–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:', {
                success: leadsData.success,
                count: leadsData.leads ? leadsData.leads.length : 0
            });
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:', leadsResponse.status);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–æ–≤:', error.message);
    }
}

checkFrontendSettings().catch(console.error);