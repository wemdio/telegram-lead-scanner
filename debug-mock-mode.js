const axios = require('axios');

async function debugMockMode() {
    console.log('üîß –û—Ç–ª–∞–¥–∫–∞ mock —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–æ–≤...\n');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞
    try {
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞...');
        const statusResponse = await axios.get('http://localhost:3001/api/status');
        console.log('‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω:', statusResponse.status);
        console.log('üìä Endpoints:', JSON.stringify(statusResponse.data.endpoints, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É:', error.response?.status || error.message);
        if (error.response?.status === 404) {
            console.log('üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints...');
            try {
                const healthResponse = await axios.get('http://localhost:3001/health');
                console.log('‚úÖ Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω:', healthResponse.status);
            } catch (healthError) {
                console.error('‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', healthError.message);
                return;
            }
        } else {
            return;
        }
    }
    
    // –¢–µ—Å—Ç 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    try {
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');
        const minimalData = {
            openrouterApiKey: 'test-key-minimal',
            criteria: '–ò—â—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
        };
        
        const minimalResponse = await axios.post('http://localhost:3001/api/leads/analyze', minimalData);
        console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', minimalResponse.status);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', minimalResponse.data);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.status, error.response?.data || error.message);
    }
    
    // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');
        const fullData = {
            openrouterApiKey: 'test-key-full',
            criteria: '–ò—â—É –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤',
            messages: [
                {
                    id: 'test_msg_1',
                    text: '–ü—Ä–∏–≤–µ—Ç! –Ø fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º –≤ React –∏ Node.js',
                    author: 'TestDev',
                    timestamp: new Date().toISOString()
                }
            ],
            spreadsheetId: 'mock-spreadsheet-id',
            googleServiceAccountEmail: 'test@example.com',
            googlePrivateKey: 'MOCK_PRIVATE_KEY'
        };
        
        const fullResponse = await axios.post('http://localhost:3001/api/leads/analyze', fullData);
        console.log('‚úÖ –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', fullResponse.status);
        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤:', fullResponse.data.leads?.length || 0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.status, error.response?.data || error.message);
    }
    
    // –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400)
    try {
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        const emptyResponse = await axios.post('http://localhost:3001/api/leads/analyze', {});
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', emptyResponse.status);
    } catch (error) {
        if (error.response?.status === 400) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400 –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.response.data.error);
        } else {
            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.status, error.response?.data || error.message);
        }
    }
    
    // –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å API –∫–ª—é—á–æ–º (–±–µ–∑ criteria)
    try {
        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ criteria...');
        const noCriteriaData = {
            openrouterApiKey: 'test-key-no-criteria'
        };
        
        const noCriteriaResponse = await axios.post('http://localhost:3001/api/leads/analyze', noCriteriaData);
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –±–µ–∑ criteria:', noCriteriaResponse.status);
    } catch (error) {
        if (error.response?.status === 400) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400 –±–µ–∑ criteria');
            console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.response.data.error);
        } else {
            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.status, error.response?.data || error.message);
        }
    }
    
    // –¢–µ—Å—Ç 6: –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å criteria (–±–µ–∑ API –∫–ª—é—á–∞)
    try {
        console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞...');
        const noApiKeyData = {
            criteria: '–ò—â—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
        };
        
        const noApiKeyResponse = await axios.post('http://localhost:3001/api/leads/analyze', noApiKeyData);
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –±–µ–∑ API –∫–ª—é—á–∞:', noApiKeyResponse.status);
    } catch (error) {
        if (error.response?.status === 400) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400 –±–µ–∑ API –∫–ª—é—á–∞');
            console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.response.data.error);
        } else {
            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.status, error.response?.data || error.message);
        }
    }
    
    console.log('\nüèÅ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugMockMode().catch(console.error);