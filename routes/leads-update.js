const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏–¥–æ–≤ –∏–∑ leads.js
const leadsModule = require('./leads.js');

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞
router.post('/update-sent', (req, res) => {
  try {
    const { leadId, sent } = req.body;
    
    console.log(`üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞: leadId=${leadId}, sent=${sent}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∞—Å—Å–∏–≤—É –ª–∏–¥–æ–≤
    const storedLeads = leadsModule.getStoredLeads();
    console.log(`üìä –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${storedLeads.length}`);
    
    if (leadId === undefined || sent === undefined) {
      return res.status(400).json({
        success: false,
        error: 'leadId –∏ sent –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –ò—â–µ–º –ª–∏–¥ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ ID
    let leadIndex = -1;
    if (typeof leadId === 'number') {
      leadIndex = leadId;
    } else {
      // –ò—â–µ–º –ø–æ ID –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      leadIndex = storedLeads.findIndex(lead => lead.id === leadId);
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –ª–∏–¥–∞: ${leadIndex}`);
    
    if (leadIndex >= 0 && leadIndex < storedLeads.length) {
      const oldSent = storedLeads[leadIndex].sent;
      storedLeads[leadIndex].sent = sent;
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${oldSent} -> ${sent}`);
      console.log(`üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–¥:`, {
        name: storedLeads[leadIndex].name,
        sent: storedLeads[leadIndex].sent
      });
      
      res.json({
        success: true,
        message: '–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
        leadIndex: leadIndex,
        oldSent: oldSent,
        newSent: sent
      });
    } else {
      console.log(`‚ùå –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: leadId=${leadId}, leadIndex=${leadIndex}`);
      res.status(404).json({
        success: false,
        error: '–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        leadId: leadId,
        leadIndex: leadIndex,
        totalLeads: storedLeads.length
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message
    });
  }
});

module.exports = router;