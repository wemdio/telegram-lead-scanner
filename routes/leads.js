const express = require('express');
const router = express.Router();
const path = require('path');
const fetch = require('node-fetch');
const fs = require('fs');

// Import the Gemini service
const geminiServicePath = path.join(__dirname, '../services/geminiService.js');
let GeminiService;
try {
  // For TypeScript files in Node.js, we need to use require with ts-node or compile first
  // For now, we'll create a JavaScript version or use dynamic import
  GeminiService = require('../services/geminiService.js');
} catch (error) {
  // console.warn('Could not load GeminiService:', error.message);
}

// Import GoogleSheetsService
const GoogleSheetsService = require('../services/GoogleSheetsService.js');
const googleSheetsService = new GoogleSheetsService();

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SETTINGS_FILE = path.join(__dirname, '..', 'persistent-settings.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
function loadSettings() {
  try {
    if (fs.existsSync(SETTINGS_FILE)) {
      const data = fs.readFileSync(SETTINGS_FILE, 'utf8');
      const settings = JSON.parse(data);
      return settings;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ leads.js:', error.message);
  }
  
  return {
    sheetsConfig: null,
    spreadsheetId: null,
    openrouterApiKey: null,
    leadCriteria: null
  };
}

// In-memory storage for leads (in production, use a database)
let storedLeads = [];
let lastAnalysisResult = null;
let leadsInitialized = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤
let leadResponses = []; // –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ª–∏–¥–æ–≤
let chatHistory = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤: leadId -> –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

// Get all stored leads with contact status from Google Sheets
router.get('/', async (req, res) => {
  try {
    console.log(`üîç GET /api/leads –≤—ã–∑–≤–∞–Ω. leadsInitialized: ${leadsInitialized}, storedLeads.length: ${storedLeads.length}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!leadsInitialized) {
      try {
        let spreadsheetId = null;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
        const settingsResponse = await fetch('http://localhost:3001/api/settings/google-sheets');
        if (settingsResponse.ok) {
          const settings = await settingsResponse.json();
          
          if (settings.success && settings.spreadsheetId && settings.spreadsheetId !== 'mock-spreadsheet-id') {
            spreadsheetId = settings.spreadsheetId;
            console.log('üìä –ü–æ–ª—É—á–µ–Ω spreadsheetId –∏–∑ localStorage');
          } else {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å spreadsheetId –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
          }
        } else {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
        }
        
        if (spreadsheetId && spreadsheetId !== 'mock-spreadsheet-id') {
          console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets (–ø–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)...');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets
          const sheetsResponse = await fetch(`http://localhost:3001/api/sheets/leads/${spreadsheetId}`);
          if (sheetsResponse.ok) {
            const sheetsData = await sheetsResponse.json();
            if (sheetsData.success && sheetsData.leads && sheetsData.leads.length > 0) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å sent) –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google Sheets
                const existingLeadsMap = new Map(storedLeads.map(lead => [lead.id, lead]));
                const mergedLeads = sheetsData.leads.map(sheetLead => {
                  const existingLead = existingLeadsMap.get(sheetLead.id);
                  if (existingLead) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (sent, contacted, contactDate, contactStatus)
                    return {
                      ...sheetLead,
                      sent: existingLead.sent || false,
                      contacted: existingLead.contacted || false,
                      contactDate: existingLead.contactDate || null,
                      contactStatus: existingLead.contactStatus || null
                    };
                  }
                  return sheetLead;
                });
                
                storedLeads = mergedLeads;
                leadsInitialized = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sheetsData.leads.length} –ª–∏–¥–æ–≤ –∏–∑ Google Sheets`);
              } else {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥—ã –∏–∑ Google Sheets –∏–ª–∏ –ª–∏–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
              }
            } else {
              console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets');
            }
          } else {
            console.log('‚ö†Ô∏è spreadsheetId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –ª–∏–¥–æ–≤');
          }
      } catch (syncError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–¥—ã –∏–∑ Google Sheets:', syncError.message);
      }
    } else {
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –ª–∏–¥–æ–≤ (${storedLeads.length} –ª–∏–¥–æ–≤)`);
    }
    
    let leadsWithContactStatus = [...storedLeads];
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏–∑ Google Sheets –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
    if (process.env.GOOGLE_SHEETS_API_KEY || req.headers['x-api-key']) {
      try {
        const apiKey = process.env.GOOGLE_SHEETS_API_KEY || req.headers['x-api-key'];
        const spreadsheetId = process.env.GOOGLE_SHEETS_ID || req.headers['x-spreadsheet-id'];
        
        if (apiKey && spreadsheetId) {
          // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–°–≤—è–∑–∞–ª–∏—Å—å"
          const contactsRange = `–°–≤—è–∑–∞–ª–∏—Å—å!A:G`;
          const contactsUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${contactsRange}?key=${apiKey}`;
          
          const response = await fetch(contactsUrl);
          const data = await response.json();
          
          if (data.values && data.values.length > 0) {
            // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (ID –ª–∏–¥–∞ -> –¥–∞—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
            const contactsMap = new Map();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            for (let i = 1; i < data.values.length; i++) {
              const row = data.values[i];
              if (row[0]) { // ID –ª–∏–¥–∞
                contactsMap.set(row[0], {
                  contacted: true,
                  contactDate: row[3] || new Date().toISOString(), // –î–∞—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                  contactName: row[1] || 'Unknown',
                  contactUsername: row[2] || '',
                  contactChannel: row[4] || '',
                  contactMessage: row[5] || '',
                  contactAccount: row[6] || ''
                });
              }
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ª–∏–¥–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            leadsWithContactStatus = leadsWithContactStatus.map(lead => {
              const contactInfo = contactsMap.get(lead.id);
              if (contactInfo) {
                return {
                  ...lead, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è sent —Å—Ç–∞—Ç—É—Å)
                  contacted: true,
                  contactDate: contactInfo.contactDate
                };
              }
              return lead; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–¥ —Å–æ –≤—Å–µ–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            });
          }
        }
      } catch (error) {
        console.error('Error loading contact data from Google Sheets:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Google Sheets
      }
    }
    
    res.json({
      leads: leadsWithContactStatus,
      lastAnalysis: lastAnalysisResult,
      total: leadsWithContactStatus.length
    });
  } catch (error) {
    // console.error('Error getting leads:', error);
    res.status(500).json({ error: 'Failed to get leads' });
  }
});

// Get leads status
router.get('/status', (req, res) => {
  try {
    res.json({
      status: 'ready',
      leads: storedLeads, // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–¥—ã –≤ –æ—Ç–≤–µ—Ç
      totalLeads: storedLeads.length,
      lastAnalysis: lastAnalysisResult ? {
        timestamp: lastAnalysisResult.timestamp,
        totalAnalyzed: lastAnalysisResult.totalAnalyzed,
        leadsFound: lastAnalysisResult.leadsFound
      } : null
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get leads status' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets
router.post('/sync-from-sheets', async (req, res) => {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets...');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    const settingsResponse = await fetch('http://localhost:3001/api/settings/google-sheets');
    if (!settingsResponse.ok) {
      return res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets' 
      });
    }
    
    const settings = await settingsResponse.json();
    
    if (!settings.success || !settings.spreadsheetId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' 
      });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ mock —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (settings.spreadsheetId === 'mock-spreadsheet-id') {
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      const mockLeads = [
        {
          id: 'sheet-lead-1',
          timestamp: new Date().toISOString(),
          channel: '@mock_channel_1',
          name: 'Mock Lead 1',
          username: '@mock_user_1',
          message: 'Mock message 1',
          reasoning: 'Mock reasoning 1',
          sent: false,
          originalIndex: 0
        },
        {
          id: 'sheet-lead-2',
          timestamp: new Date().toISOString(),
          channel: '@mock_channel_2',
          name: 'Mock Lead 2',
          username: '@mock_user_2',
          message: 'Mock message 2',
          reasoning: 'Mock reasoning 2',
          sent: false,
          originalIndex: 1
        }
      ];
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ª–∏–¥–∞–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const existingIds = new Set(storedLeads.map(lead => lead.id));
      const newLeads = mockLeads.filter(lead => !existingIds.has(lead.id));
      
      storedLeads = [...storedLeads, ...newLeads];
      
      return res.json({
        success: true,
        message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${newLeads.length} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ Google Sheets (mock —Ä–µ–∂–∏–º)`,
        totalLeads: storedLeads.length,
        newLeads: newLeads.length,
        leads: storedLeads
      });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets...');
    const sheetsResponse = await fetch(`http://localhost:3001/api/sheets/leads/${settings.spreadsheetId}`);
    
    if (!sheetsResponse.ok) {
      const errorText = await sheetsResponse.text();
      return res.status(500).json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets: ${errorText}` 
      });
    }
    
    const sheetsData = await sheetsResponse.json();
    
    if (!sheetsData.success || !sheetsData.leads) {
      return res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥—ã –∏–∑ Google Sheets' 
      });
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ª–∏–¥–∞–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const existingIds = new Set(storedLeads.map(lead => lead.id));
    const newLeads = sheetsData.leads.filter(lead => !existingIds.has(lead.id));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–∏–¥—ã
    storedLeads = [...storedLeads, ...newLeads];
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${newLeads.length} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ Google Sheets`);
    
    res.json({
      success: true,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${newLeads.length} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ Google Sheets`,
      totalLeads: storedLeads.length,
      newLeads: newLeads.length,
      leads: storedLeads
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}` 
    });
  }
});

// Analyze messages for leads
router.post('/analyze', async (req, res) => {
  try {
    // console.log('üîç Starting leads analysis...');
    let { openrouterApiKey, criteria, messages, spreadsheetId, googleServiceAccountEmail, googlePrivateKey } = req.body;
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    if (!openrouterApiKey || !criteria) {
      const savedSettings = loadSettings();
      openrouterApiKey = openrouterApiKey || savedSettings.openrouterApiKey;
      criteria = criteria || savedSettings.leadCriteria;
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:', {
        hasApiKey: !!openrouterApiKey,
        hasCriteria: !!criteria
      });
    }
    
  // console.log(`üìã Request data: apiKey=${openrouterApiKey ? 'provided' : 'missing'}, criteria=${criteria ? 'provided' : 'missing'}, messages=${messages ? messages.length : 'none'}`);

  if (!openrouterApiKey || !criteria) {
    // console.error('‚ùå Missing required fields:', { openrouterApiKey: !!openrouterApiKey, criteria: !!criteria });
    return res.status(400).json({
      error: 'Missing required fields: openrouterApiKey and criteria are required'
    });
    }

    // Use messages from request body, or fallback to Google Sheets
    let messagesToAnalyze = messages;
    if (!messagesToAnalyze || messagesToAnalyze.length === 0) {
      console.log('üìä No messages in request body, getting from Google Sheets...');
      const { spreadsheetId, googleServiceAccountEmail, googlePrivateKey } = req.body;
      try {
        messagesToAnalyze = await getMessagesForAnalysis(spreadsheetId, googleServiceAccountEmail, googlePrivateKey);
        console.log(`üìä Retrieved ${messagesToAnalyze.length} messages from Google Sheets`);
      } catch (sheetsError) {
        console.error('‚ùå Error getting messages from Google Sheets:', sheetsError);
        return res.status(500).json({
          error: 'Failed to retrieve messages from Google Sheets',
          message: sheetsError.message
        });
      }
    } else {
      console.log(`üìã Using ${messagesToAnalyze.length} messages from request body`);
    }

    if (messagesToAnalyze.length === 0) {
      // console.log('‚ö†Ô∏è No messages found to analyze, using test message for demo');
      // Add a test message for demo purposes when no real messages are available
      messagesToAnalyze = [{
        id: 'test_msg_1',
        channel: 'test',
        author: 'test',
        username: 'test_user',
        message: 'test message',
        timestamp: '2024-01-01T00:00:00.000Z',
        userId: 'test_user_id',
        chatId: 'test_chat_id'
      }];
    }

    // Initialize Gemini service
    // console.log('ü§ñ Initializing Gemini service...');
    const GeminiServiceClass = require('../services/geminiService.js');
    const geminiService = new GeminiServiceClass();
    
    try {
      geminiService.initialize({ apiKey: openrouterApiKey });
      // console.log('‚úÖ Gemini service initialized successfully');
    } catch (initError) {
      // console.error('‚ùå Failed to initialize Gemini service:', initError);
      return res.status(500).json({
        error: 'Failed to initialize Gemini service',
        message: initError.message
      });
    }

    // Analyze messages
    // console.log(`üîç Starting analysis of ${messagesToAnalyze.length} messages...`);
    
    // Normalize criteria format - handle both string and object formats
    let normalizedCriteria;
    if (typeof criteria === 'string') {
      normalizedCriteria = { description: criteria };
    } else if (criteria && typeof criteria === 'object' && criteria.description) {
      normalizedCriteria = criteria;
    } else {
      // console.error('‚ùå Invalid criteria format:', criteria);
      return res.status(400).json({
        error: 'Invalid criteria format. Expected string or object with description field.'
      });
    }
    
    // console.log('üìã Normalized criteria:', normalizedCriteria);
    
    let analysisResult;
    try {
      analysisResult = await geminiService.analyzeMessagesForLeads(messagesToAnalyze, normalizedCriteria);
      // console.log('‚úÖ Analysis completed successfully:', {
      //   leadsFound: analysisResult.leads ? analysisResult.leads.length : 0,
      //   totalAnalyzed: analysisResult.totalAnalyzed,
      //   processingTime: analysisResult.processingTime
      // });
      // If the analysis returned OpenRouter-style choices with JSON content, parse leads from it
      if ((!analysisResult.leads || (Array.isArray(analysisResult.leads) && analysisResult.leads.length === 0)) 
          && analysisResult.choices && Array.isArray(analysisResult.choices)) {
        try {
          const content = analysisResult.choices[0]?.message?.content || analysisResult.choices[0]?.text || '';
          const parsed = typeof content === 'string' ? JSON.parse(content) : content;
          if (parsed && parsed.leads && Array.isArray(parsed.leads)) {
            // Map parsed leads to normalized lead objects using source messages
            const msgById = new Map(messagesToAnalyze.map(m => [m.id, m]));
            const normalizedFromChoices = parsed.leads.map(l => {
              const src = msgById.get(l.messageId) || messagesToAnalyze[0] || {};
              return {
                id: l.messageId || src.id || Math.random().toString(36).slice(2),
                name: `${src.firstName || ''} ${src.lastName || ''}`.trim() || src.author || src.username || 'Unknown',
                firstName: src.firstName || null,
                lastName: src.lastName || null,
                username: src.username || '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º',
                channel: src.chatTitle || src.channel || 'Unknown',
                message: src.message || '',
                timestamp: src.timestamp || new Date().toISOString(),
                reason: l.reason || l.reasoning || '–ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–¥',
                confidence: l.confidence || l.score || 0,
                sent: false,
              };
            });
            analysisResult.leads = normalizedFromChoices;
          }
        } catch (e) {
          // console.warn('Failed to parse choices content as leads:', e.message);
        }
      }
      // Ensure analysisResult.leads is an array for downstream processing
      const normalizedLeadsArr = Array.isArray(analysisResult.leads)
        ? analysisResult.leads
        : (analysisResult.leads ? Object.values(analysisResult.leads) : []);
      analysisResult.leads = normalizedLeadsArr;
    } catch (analysisError) {
      // console.error('‚ùå Analysis failed:', analysisError);
      return res.status(500).json({
        error: 'Failed to analyze messages',
        message: analysisError.message,
        stack: process.env.NODE_ENV === 'development' ? analysisError.stack : undefined
      });
    }

    // Store results
    const result = {
      ...analysisResult,
      timestamp: new Date().toISOString()
    };

    // Update stored leads - preserve existing leads and their statuses
    if (result.leads && result.leads.length > 0) {
      // Create a map of existing leads by their unique identifier
      const existingLeadsMap = new Map();
      storedLeads.forEach(lead => {
        const key = `${lead.channel}_${lead.username}_${lead.message}`;
        existingLeadsMap.set(key, lead);
      });
      
      // Merge new leads with existing ones, preserving statuses
      const mergedLeads = result.leads.map(newLead => {
        const key = `${newLead.channel}_${newLead.username}_${newLead.message}`;
        const existingLead = existingLeadsMap.get(key);
        
        if (existingLead) {
          // Preserve existing lead's status fields
          return {
            ...newLead,
            sent: existingLead.sent || false,
            contacted: existingLead.contacted || false,
            contactDate: existingLead.contactDate || null,
            contactStatus: existingLead.contactStatus || null
          };
        }
        
        return {
          ...newLead,
          sent: false,
          contacted: false,
          contactDate: null,
          contactStatus: null
        };
      });
      
      // Add any existing leads that weren't found in the new analysis
      const newLeadKeys = new Set(result.leads.map(lead => `${lead.channel}_${lead.username}_${lead.message}`));
      const preservedLeads = storedLeads.filter(lead => {
        const key = `${lead.channel}_${lead.username}_${lead.message}`;
        return !newLeadKeys.has(key);
      });
      
      storedLeads = [...mergedLeads, ...preservedLeads];
    }
    lastAnalysisResult = result;

    // Save leads to –õ–∏–¥—ã in Google Sheets if there are any leads
    if (result.leads && result.leads.length > 0) {
      try {
        const targetSpreadsheetId = spreadsheetId || process.env.GOOGLE_SPREADSHEET_ID;
        
        if (targetSpreadsheetId && !targetSpreadsheetId.includes('mock')) {
          // Initialize if not already
          if (!googleSheetsService.isInitialized()) {
            const clientEmail = googleServiceAccountEmail || process.env.GOOGLE_SHEETS_CLIENT_EMAIL || process.env.GOOGLE_CLIENT_EMAIL;
            const privateKey = googlePrivateKey || process.env.GOOGLE_SHEETS_PRIVATE_KEY || process.env.GOOGLE_PRIVATE_KEY;
            await googleSheetsService.initialize({
              clientEmail,
              privateKey,
              projectId: process.env.GOOGLE_SHEETS_PROJECT_ID || process.env.GOOGLE_PROJECT_ID || 'default-project'
            });
          }
          // Append leads (spreadsheetId, sheetName, leads)
          await googleSheetsService.appendLeads(targetSpreadsheetId, '–õ–∏–¥—ã', result.leads);
          console.log(`‚úÖ Successfully saved ${result.leads.length} leads to –õ–∏–¥—ã`);
        } else {
          console.log('‚ö†Ô∏è No valid spreadsheet ID configured for saving leads');
        }
      } catch (sheetsError) {
        console.error('‚ùå Error saving leads to –õ–∏–¥—ã:', sheetsError);
      }
    }

    res.json(result);

  } catch (error) {
    // console.error('Error analyzing leads:', error);
    res.status(500).json({ 
      error: 'Failed to analyze leads',
      message: error.message 
    });
  }
});

// Create a new lead
router.post('/', async (req, res) => {
  try {
    const leadData = req.body;
    
    // Validate required fields
    if (!leadData.name || !leadData.contact) {
      return res.status(400).json({ 
        error: 'Missing required fields: name and contact are required' 
      });
    }

    // Add metadata to the lead
    const newLead = {
      ...leadData,
      id: `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: leadData.timestamp || new Date().toISOString(),
      analysisTimestamp: new Date().toISOString()
    };

    // Add to in-memory storage
    storedLeads.push(newLead);

    // Try to save to Google Sheets
    try {
      await googleSheetsService.saveLead(newLead);
      console.log('‚úÖ Lead saved to Google Sheets:', newLead.name);
    } catch (error) {
      console.log('‚ö†Ô∏è Failed to save lead to Google Sheets (using mock mode):', error.message);
    }

    res.json({ 
      success: true, 
      message: 'Lead created successfully',
      lead: newLead
    });
  } catch (error) {
    console.error('Error creating lead:', error);
    res.status(500).json({ error: 'Failed to create lead' });
  }
});

// Clear all leads
router.delete('/', (req, res) => {
  try {
    storedLeads = [];
    lastAnalysisResult = null;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,
    // —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ –ø–æ–¥—Ç—è–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    leadsInitialized = false;
    leadResponses = [];
    chatHistory = new Map();
    res.json({ message: 'All leads cleared successfully', leadsInitialized });
  } catch (error) {
    // console.error('Error clearing leads:', error);
    res.status(500).json({ error: 'Failed to clear leads' });
  }
});

// Store analyzed leads
router.post('/store', (req, res) => {
  try {
    const { leads: newLeads, analysisTimestamp, criteria } = req.body;
    
    // Normalize leads input to array (handle object maps from some analyzers)
    let incomingLeads = newLeads;
    if (!incomingLeads) {
      return res.status(400).json({ error: 'Invalid leads data' });
    }
    const normalizedIncomingLeads = Array.isArray(incomingLeads)
      ? incomingLeads
      : (typeof incomingLeads === 'object' ? Object.values(incomingLeads) : []);
    if (!Array.isArray(normalizedIncomingLeads) || normalizedIncomingLeads.length === 0) {
      return res.status(400).json({ error: 'Invalid leads data (empty after normalization)' });
    }
    
    // Add metadata to each lead
    const leadsWithMetadata = normalizedIncomingLeads.map(lead => ({
      ...lead,
      analysisTimestamp: analysisTimestamp || new Date().toISOString(),
      criteria: criteria || 'Unknown criteria',
      id: `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }));
    
    // Add new leads to existing storage (append instead of replace)
    storedLeads = [...storedLeads, ...leadsWithMetadata];
    
    // Update last analysis result
    lastAnalysisResult = {
      leads: leadsWithMetadata,
      timestamp: analysisTimestamp || new Date().toISOString(),
      totalAnalyzed: leadsWithMetadata.length
    };
    
    // console.log(`üìù Stored ${newLeads.length} new leads`);
    
    res.json({ 
      success: true, 
      message: `Successfully stored ${normalizedIncomingLeads.length} leads`,
      leadsStored: normalizedIncomingLeads.length
    });
  } catch (error) {
    // console.error('Error storing leads:', error);
    res.status(500).json({ error: 'Failed to store leads' });
  }
});

// Get analysis statistics
router.get('/stats', (req, res) => {
  try {
    const stats = {
      totalLeads: storedLeads.length,
      lastAnalysisTime: lastAnalysisResult?.timestamp || null,
      averageConfidence: storedLeads.length > 0 
        ? storedLeads.reduce((sum, lead) => sum + lead.confidence, 0) / storedLeads.length 
        : 0,
      channelDistribution: getChannelDistribution(storedLeads)
    };
    
    res.json(stats);
  } catch (error) {
    // console.error('Error getting stats:', error);
    res.status(500).json({ error: 'Failed to get statistics' });
  }
});

// Generate personalized message for a lead
router.post('/generate-message', async (req, res) => {
  try {
    const { lead, openrouterApiKey, messageContext, aiPrompt, leadSearchCriteria } = req.body;
    
    console.log('üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('- aiPrompt:', aiPrompt);
    console.log('- aiPrompt length:', aiPrompt ? aiPrompt.length : 0);
    console.log('- messageContext:', messageContext);
    console.log('- leadSearchCriteria:', leadSearchCriteria);
    console.log('- lead:', lead?.firstName, lead?.lastName);
    
    if (!lead || !openrouterApiKey) {
      return res.status(400).json({ 
        error: 'Lead data and OpenRouter API key are required' 
      });
    }

    // Check for mock API key
    const isMockApiKey = !openrouterApiKey ||
                        openrouterApiKey === 'mock' ||
                        openrouterApiKey === 'your_api_key_here' ||
                        openrouterApiKey === 'test_key' ||
                        openrouterApiKey === 'sk-test';

    if (isMockApiKey) {
      // –í mock —Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      let mockMessage;
      
      if (aiPrompt && aiPrompt.trim()) {
        // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const leadName = lead.firstName || lead.name || lead.author || '–¥—Ä—É–≥';
        // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º–ø—Ç—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
        mockMessage = `–ü—Ä–∏–≤–µ—Ç, ${leadName}! –£–≤–∏–¥–µ–ª –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ "${leadSearchCriteria || '–±–∏–∑–Ω–µ—Å'}" - –¥–∞–≤–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!`;
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ mock —Å–æ–æ–±—â–µ–Ω–∏–µ
        mockMessage = `–ü—Ä–∏–≤–µ—Ç, ${lead.firstName || '–¥—Ä—É–≥'}! 

–£–≤–∏–¥–µ–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ "${lead.channel}" –∏ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ —É –Ω–∞—Å –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –±–∏–∑–Ω–µ—Å–µ. 

${lead.message ? `–û—Å–æ–±–µ–Ω–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ: "${lead.message.length > 100 ? lead.message.substring(0, 100) + '...' : lead.message}"` : ''}

–ë—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –æ–±—Å—É–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º!`;
      }

      return res.json({
        success: true,
        message: mockMessage,
        mock: true
      });
    }

    // Use GeminiService or OpenRouter to generate personalized message
    try {
      let prompt;
      
      console.log('üîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:');
      console.log('- –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π aiPrompt:', !!(aiPrompt && aiPrompt.trim()));
      
      if (aiPrompt && aiPrompt.trim()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤
        const leadName = lead.name || lead.author || lead.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const leadLastName = lead.lastName || '';
        const fullName = `${leadName} ${leadLastName}`.trim();
        const username = lead.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        const channel = lead.channel || lead.chatTitle || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const message = lead.message || '';
        
        prompt = `–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-—á–∞—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.

–ö–†–ò–¢–ï–†–ò–ò –ü–û–ò–°–ö–ê –õ–ò–î–û–í: ${leadSearchCriteria || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–î–ê–ù–ù–´–ï –ù–ê–ô–î–ï–ù–ù–û–ì–û –õ–ò–î–ê:
- –ò–º—è: ${fullName}
- Username: @${username}
- –ö–∞–Ω–∞–ª/–ß–∞—Ç –≥–¥–µ –Ω–∞–π–¥–µ–Ω: ${channel}
- –°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–∞: "${message}"
${messageContext ? `- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${messageContext}` : ''}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ [–í–∞—à–µ –ò–º—è], [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏], [–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è] –∏ —Ç.–ø.
2. –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π")
3. –°–æ–∑–¥–∞–π –ì–û–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
5. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ç—ã –Ω–∞—à–µ–ª –ª–∏–¥–∞ (—á–µ—Ä–µ–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ)
6. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ë–ï–ó –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í):

–ü—Ä–∏–º–µ—Ä 1:
"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π. –£–≤–∏–¥–µ–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ –ø–æ–∏—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ó–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–∂–µ 5 –ª–µ—Ç. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–≤–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º. –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏?"

–ü—Ä–∏–º–µ—Ä 2:
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –ó–∞–º–µ—Ç–∏–ª–∞ —Ç–≤–æ–π –ø–æ—Å—Ç –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ì–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"

–ü—Ä–∏–º–µ—Ä 3:
"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º. –ü—Ä–æ—á–∏—Ç–∞–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –°–æ–∑–¥–∞—é –ª–æ–≥–æ—Ç–∏–ø—ã –∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ù–∞–ø–∏—à–µ—à—å?"

–ó–ê–î–ê–ß–ê: –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–∞ ${fullName} (@${username}), —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "${message}" –∏–∑ —á–∞—Ç–∞ "${channel}". –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

${aiPrompt}

–ù–∞–ø–∏—à–∏ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í:`;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('=== –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ò ===');
        console.log(prompt);
        console.log('=== –ö–û–ù–ï–¶ –ü–†–û–ú–ü–¢–ê ===');
        
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤');
      } else {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –Ω–µ –∑–∞–¥–∞–Ω
        const leadName = lead.name || lead.author || lead.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const leadLastName = lead.lastName || '';
        const fullName = `${leadName} ${leadLastName}`.trim();
        const username = lead.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        const channel = lead.channel || lead.chatTitle || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const message = lead.message || '';
        
        prompt = `–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-—á–∞—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.

–ö–†–ò–¢–ï–†–ò–ò –ü–û–ò–°–ö–ê –õ–ò–î–û–í: ${leadSearchCriteria || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–î–ê–ù–ù–´–ï –ù–ê–ô–î–ï–ù–ù–û–ì–û –õ–ò–î–ê:
- –ò–º—è: ${fullName}
- Username: @${username}
- –ö–∞–Ω–∞–ª/–ß–∞—Ç –≥–¥–µ –Ω–∞–π–¥–µ–Ω: ${channel}
- –°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–∞: "${message}"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ [–í–∞—à–µ –ò–º—è], [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏], [–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è] –∏ —Ç.–ø.
2. –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π")
3. –°–æ–∑–¥–∞–π –ì–û–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
5. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ç—ã –Ω–∞—à–µ–ª –ª–∏–¥–∞ (—á–µ—Ä–µ–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ)
6. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ë–ï–ó –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í):

–ü—Ä–∏–º–µ—Ä 1:
"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π. –£–≤–∏–¥–µ–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ –ø–æ–∏—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ó–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–∂–µ 5 –ª–µ—Ç. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–≤–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º. –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏?"

–ü—Ä–∏–º–µ—Ä 2:
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –ó–∞–º–µ—Ç–∏–ª–∞ —Ç–≤–æ–π –ø–æ—Å—Ç –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ì–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"

–ü—Ä–∏–º–µ—Ä 3:
"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º. –ü—Ä–æ—á–∏—Ç–∞–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –°–æ–∑–¥–∞—é –ª–æ–≥–æ—Ç–∏–ø—ã –∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ù–∞–ø–∏—à–µ—à—å?"

–ó–ê–î–ê–ß–ê: –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–∞ ${fullName} (@${username}), —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "${message}" –∏–∑ —á–∞—Ç–∞ "${channel}". –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–ù–∞–ø–∏—à–∏ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í:`;

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('=== –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ò (–°–¢–ê–ù–î–ê–†–¢–ù–´–ô) ===');
        console.log(prompt);
        console.log('=== –ö–û–ù–ï–¶ –ü–†–û–ú–ü–¢–ê ===');
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤');
      }
      
      // –ü–û–õ–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      console.log('üîç –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ò:');
      console.log('=' * 80);
      console.log(prompt);
      console.log('=' * 80);

      // Try to use OpenRouter API
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openrouterApiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'http://localhost:3000',
          'X-Title': 'Telegram Lead Scanner'
        },
        body: JSON.stringify({
          model: 'google/gemini-2.0-flash-001',
          messages: [
            {
              role: 'system',
              content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –ì–û–¢–û–í–û–ï –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ó–ê–ü–†–ï–©–ï–ù–û:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ [ ] –≤ —Ç–µ–∫—Å—Ç–µ
- –ü–∏—Å–∞—Ç—å [–í–∞—à–µ –ò–º—è], [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏], [–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è], [–ò–º—è], [–§–∞–º–∏–ª–∏—è]
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
- –û—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
- –ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–º—è: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π" –∏–ª–∏ "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞"
- –°–æ–∑–¥–∞–≤–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ - –∏—Å–ø–æ–ª—å–∑—É–π "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä"

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –§–†–ê–ó:
‚úÖ "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π"
‚úÖ "–Ø –ê–Ω–Ω–∞, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥"
‚úÖ "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º, —Ä–∞–±–æ—Ç–∞—é –≤ IT"

–ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–ï–©–ï–ù–ù–´–• –§–†–ê–ó:
‚ùå "–ú–µ–Ω—è –∑–æ–≤—É—Ç [–í–∞—à–µ –ò–º—è]"
‚ùå "–Ø [–ò–º—è], —Ä–∞–±–æ—Ç–∞—é –≤ [–ö–æ–º–ø–∞–Ω–∏—è]"
‚ùå "–û—Ç [–í–∞—à–µ –ò–º—è]"`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 800,
          temperature: 0.2
        })
      });

      if (!response.ok) {
        throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      const generatedMessage = data.choices?.[0]?.message?.content?.trim();

      if (!generatedMessage) {
        throw new Error('No message generated from OpenRouter API');
      }

      res.json({
        success: true,
        message: generatedMessage
      });

    } catch (aiError) {
      console.error('Error generating message with AI:', aiError);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      let fallbackMessage;
      
      if (aiPrompt && aiPrompt.trim()) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        const leadName = lead.firstName || lead.name || lead.author || '–¥—Ä—É–≥';
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const promptLower = aiPrompt.toLowerCase();
        
        if (promptLower.includes('–∫–æ—Ä–æ—Ç–∫–æ–µ') || promptLower.includes('–∫—Ä–∞—Ç–∫–æ')) {
          // –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (promptLower.includes('–≤—Å—Ç—Ä–µ—Ç') || promptLower.includes('–æ–±—Å—É–¥')) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            const safeMessage = lead.message ? Buffer.from(lead.message, 'utf8').toString('utf8') : '';
            const messagePreview = safeMessage && safeMessage.length > 0 ? 
              (safeMessage.length > 50 ? safeMessage.substring(0, 50) + '...' : safeMessage) : 
              '–≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ';
            fallbackMessage = `–ü—Ä–∏–≤–µ—Ç, ${leadName}! –£–≤–∏–¥–µ–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ "${messagePreview}". –î–∞–≤–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!`;
          } else {
            fallbackMessage = `–ü—Ä–∏–≤–µ—Ç, ${leadName}! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`;
          }
        } else if (promptLower.includes('–¥—Ä—É–∂–µ–ª—é–±–Ω')) {
          // –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const safeChannel = lead.channel ? Buffer.from(lead.channel, 'utf8').toString('utf8') : '—á–∞—Ç–µ';
          fallbackMessage = `–ü—Ä–∏–≤–µ—Ç, ${leadName}! –£–≤–∏–¥–µ–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "${safeChannel}" –∏ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ —É –Ω–∞—Å –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!`;
        } else {
          // –û–±—â–∏–π —Å–ª—É—á–∞–π - –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const safeMessage = lead.message ? Buffer.from(lead.message, 'utf8').toString('utf8') : '';
          const messagePreview = safeMessage && safeMessage.length > 0 ? 
            (safeMessage.length > 100 ? safeMessage.substring(0, 100) + '...' : safeMessage) : 
            '–≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ';
          fallbackMessage = `–ü—Ä–∏–≤–µ—Ç, ${leadName}! –ó–∞–º–µ—Ç–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ "${messagePreview}". –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!`;
        }
        
        console.log('‚úÖ Fallback: —Å–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞');
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        fallbackMessage = `–ü—Ä–∏–≤–µ—Ç! –ó–∞–º–µ—Ç–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${lead.channel || '—á–∞—Ç–µ'} –∏ —Ö–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.

–ö–û–ù–¢–ï–ö–°–¢ –õ–ò–î–ê:
- –ò–º—è: ${lead.name || lead.author || lead.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${lead.lastName || ''}
- –ö–∞–Ω–∞–ª: ${lead.channel || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- –°–æ–æ–±—â–µ–Ω–∏–µ: ${lead.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –î–∞—Ç–∞: ${lead.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–ë—É–¥—É —Ä–∞–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—é!`;
      }

      res.json({
        success: true,
        message: fallbackMessage,
        fallback: true,
        aiError: aiError.message
      });
    }

  } catch (error) {
    console.error('Error in generate-message endpoint:', error);
    res.status(500).json({ 
      error: 'Failed to generate message', 
      message: error.message 
    });
  }
});

// Helper function to get messages for analysis
async function getMessagesForAnalysis(requestSpreadsheetId, googleServiceAccountEmail, googlePrivateKey) {
  try {
    // Use spreadsheet ID from request or fallback to environment variable
    const spreadsheetId = requestSpreadsheetId || process.env.GOOGLE_SPREADSHEET_ID;
    
    if (!spreadsheetId) {
      // console.warn('‚ö†Ô∏è No spreadsheet ID provided in request or environment, returning empty array');
      return [];
    }
    
    if (spreadsheetId.includes('mock')) {
      // console.warn('‚ö†Ô∏è Mock spreadsheet ID detected, returning empty array');
      return [];
    }
    
    // console.log(`üìä Getting messages from Google Sheets: ${spreadsheetId}`);
    
    // Get data from Google Sheets using service
    if (!googleSheetsService.isInitialized()) {
      await googleSheetsService.initialize({
        spreadsheetId,
        googleServiceAccountEmail,
        googlePrivateKey
      });
    }
    
    const rows = await googleSheetsService.getSheetData('–°–æ–æ–±—â–µ–Ω–∏—è', 'A:I');
    
    if (!rows || rows.length === 0) {
      // console.error('‚ùå No data received from Google Sheets');
      return [];
    }
    
    if (rows.length <= 1) {
      // console.log('üìù No data rows found in spreadsheet (only headers or empty)');
      return [];
    }
    
    // Skip header row and parse messages
    const messages = [];
    const seenMessageIds = new Set(); // Track unique message IDs to prevent duplicates
    const headers = rows[0] || [];
    
    // Expected headers: ['Timestamp', 'Chat Title', 'Username', 'First Name', 'Last Name', 'User ID', 'Message', 'Chat ID', 'Message Type']
    const timestampIndex = headers.indexOf('Timestamp');
    const chatTitleIndex = headers.indexOf('Chat Title');
    const usernameIndex = headers.indexOf('Username');
    const firstNameIndex = headers.indexOf('First Name');
    const lastNameIndex = headers.indexOf('Last Name');
    const userIdIndex = headers.indexOf('User ID');
    const messageIndex = headers.indexOf('Message');
    const chatIdIndex = headers.indexOf('Chat ID');
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      
      // Skip empty rows
      if (!row || row.length === 0 || !row[messageIndex]) {
        continue;
      }
      
      // Create unique ID based on message content and user to prevent duplicates
      const messageContent = row[messageIndex] || '';
      const userId = row[userIdIndex] || 'unknown';
      const chatId = row[chatIdIndex] || 'unknown';
      const timestamp = row[timestampIndex] || new Date().toISOString();
      
      // Generate hash-like ID from content to prevent duplicates
      const contentHash = Buffer.from(`${userId}_${chatId}_${messageContent}_${timestamp}`).toString('base64').slice(0, 16);
      
      const message = {
        id: `msg_${contentHash}`,
        channel: row[chatTitleIndex] || 'Unknown Channel',
        author: `${row[firstNameIndex] || ''} ${row[lastNameIndex] || ''}`.trim() || 'Unknown User',
        username: row[usernameIndex] && row[usernameIndex] !== '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º' ? row[usernameIndex] : '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º',
        message: messageContent,
        timestamp: timestamp,
        userId: userId,
        chatId: chatId
      };
      
      // Only add messages with actual content and prevent duplicates
      if (message.message.trim() && !seenMessageIds.has(message.id)) {
        seenMessageIds.add(message.id);
        messages.push(message);
      } else if (seenMessageIds.has(message.id)) {
        // console.log(`‚ö†Ô∏è Skipping duplicate message with ID: ${message.id}`);
      }
    }
    
    // console.log(`üìä Loaded ${messages.length} messages from Google Sheets for analysis`);
    return messages;
    
  } catch (error) {
    // console.error('‚ùå Error getting messages from Google Sheets:', error);
    return [];
  }
}

// Helper function to get channel distribution
function getChannelDistribution(leads) {
  const distribution = {};
  leads.forEach(lead => {
    distribution[lead.channel] = (distribution[lead.channel] || 0) + 1;
  });
  return distribution;
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ª–∏–¥–æ–≤
router.get('/responses', (req, res) => {
  try {
    res.json({
      responses: leadResponses,
      total: leadResponses.length
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get lead responses' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏–¥–∞
router.post('/responses', async (req, res) => {
  try {
    const { leadId, leadName, message, timestamp, chatId } = req.body;
    
    if (!leadId || !message) {
      return res.status(400).json({ error: 'Lead ID and message are required' });
    }

    const response = {
      id: Date.now().toString(),
      leadId,
      leadName: leadName || 'Unknown',
      message,
      timestamp: timestamp || new Date().toISOString(),
      chatId: chatId || null,
      read: false
    };

    leadResponses.push(response);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ª–∏–¥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    const chatMessage = {
      id: response.id,
      leadId: leadId,
      message: message,
      timestamp: response.timestamp,
      isFromLead: true, // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏–¥–∞
      chatId: chatId
    };
    
    if (!chatHistory.has(leadId)) {
      chatHistory.set(leadId, []);
    }
    
    chatHistory.get(leadId).push(chatMessage);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets (–ª–∏—Å—Ç "–°–≤—è–∑–∞–ª–∏—Å—å")
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!googleSheetsService.isInitialized()) {
        await googleSheetsService.initialize(null, true); // mock mode
      }
      
      await googleSheetsService.appendToSheet('–°–≤—è–∑–∞–ª–∏—Å—å', [
        [
          leadId,
          leadName || 'Unknown',
          chatId,
          message,
          new Date().toISOString(),
          '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          '–°–≤—è–∑–∞–ª–∏—Å—å'
        ]
      ]);
      
      console.log('‚úÖ Message recorded in Google Sheets');
    } catch (sheetsError) {
      console.error('Error saving message to Google Sheets:', sheetsError);
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏
    }

    res.json({
      success: true,
      response
    });
  } catch (error) {
    console.error('Error adding lead response:', error);
    res.status(500).json({ error: 'Failed to add lead response' });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
router.patch('/responses/:id/read', (req, res) => {
  try {
    const { id } = req.params;
    const response = leadResponses.find(r => r.id === id);
    
    if (!response) {
      return res.status(404).json({ error: 'Response not found' });
    }

    response.read = true;
    
    res.json({
      success: true,
      response
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to mark response as read' });
  }
});

// –ü–æ–º–µ—Ç–∏—Ç—å –ª–∏–¥–∞ –∫–∞–∫ —Å–≤—è–∑–∞–ª–∏—Å—å
router.patch('/contact/:id', async (req, res) => {
  try {
    const leadId = req.params.id;
    const { contacted = true, contactDate = new Date().toISOString(), leadName, leadUsername, channel, message, accountUsed } = req.body;
    
    // –ù–∞–π—Ç–∏ –ª–∏–¥–∞ –≤ –º–∞—Å—Å–∏–≤–µ
    let leadIndex = storedLeads.findIndex(lead => lead.id === leadId);
    let lead = null;
    let isSheetLead = false;
    
    if (leadIndex !== -1) {
      // –õ–∏–¥ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      lead = storedLeads[leadIndex];
      storedLeads[leadIndex].contacted = contacted;
      storedLeads[leadIndex].contactDate = contactDate;
    } else if (leadId.startsWith('sheet-lead-')) {
      // –≠—Ç–æ –ª–∏–¥ –∏–∑ Google Sheets
      isSheetLead = true;
      lead = {
        id: leadId,
        author: leadName || 'Unknown',
        username: leadUsername || '',
        channel: channel || '',
        contacted: contacted,
        contactDate: contactDate
      };
    } else {
      return res.status(404).json({ error: 'Lead not found' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
    if (process.env.GOOGLE_SHEETS_API_KEY || req.headers['x-api-key']) {
      try {
        const apiKey = process.env.GOOGLE_SHEETS_API_KEY || req.headers['x-api-key'];
        const spreadsheetId = process.env.GOOGLE_SHEETS_ID || req.headers['x-spreadsheet-id'];
        
        if (apiKey && spreadsheetId) {
          // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç –ª–∏–¥–æ–≤
          const range = `–õ–∏–¥—ã!A:Z`;
          const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?key=${apiKey}`;
          
          const response = await fetch(url);
          const data = await response.json();
          
          if (data.values) {
            // –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –ª–∏–¥–æ–º –∏ –æ–±–Ω–æ–≤–∏—Ç—å
            const headers = data.values[0];
            const contactedIndex = headers.indexOf('contacted');
            const contactDateIndex = headers.indexOf('contactDate');
            
            for (let i = 1; i < data.values.length; i++) {
              if (data.values[i][0] === leadId) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                if (contactedIndex !== -1) {
                  data.values[i][contactedIndex] = contacted.toString();
                }
                if (contactDateIndex !== -1) {
                  data.values[i][contactDateIndex] = contactDate;
                }
                break;
              }
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
            const updateUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?valueInputOption=RAW&key=${apiKey}`;
            await fetch(updateUrl, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                values: data.values
              })
            });
          }
          
          // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç "–°–≤—è–∑–∞–ª–∏—Å—å" –µ—Å–ª–∏ –ª–∏–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–≤—è–∑–∞–ª–∏—Å—å
          if (contacted) {
            const contactsRange = `–°–≤—è–∑–∞–ª–∏—Å—å!A:G`;
            const contactsUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${contactsRange}:append?valueInputOption=RAW&key=${apiKey}`;
            
            const contactRecord = [
              lead.id,
              lead.author || lead.name || leadName || 'Unknown',
              lead.username || leadUsername || '',
              contactDate,
              lead.channel || channel || '',
              message || '',
              accountUsed || ''
            ];
            
            await fetch(contactsUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                values: [contactRecord]
              })
            });
          }
        }
      } catch (error) {
        console.error('Error updating Google Sheets:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets
      }
    }
    
    res.json({
      success: true,
      lead: lead
    });
    
  } catch (error) {
    console.error('Error updating lead contact status:', error);
    res.status(500).json({ error: 'Failed to update lead contact status' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ª–∏–¥–æ–º
router.get('/chat/:leadId', (req, res) => {
  try {
    const { leadId } = req.params;
    const messages = chatHistory.get(leadId) || [];
    
    res.json({
      success: true,
      messages: messages
    });
  } catch (error) {
    console.error('Error getting chat history:', error);
    res.status(500).json({ error: 'Failed to get chat history' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥—É
router.post('/send-message', async (req, res) => {
  try {
    const { leadId, leadName, chatId, message } = req.body;
    
    if (!leadId || !message || !chatId) {
      return res.status(400).json({ error: 'leadId, message, and chatId are required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const accountId = process.env.TELEGRAM_ACCOUNT_ID || req.headers['x-account-id'];
    const apiId = process.env.TELEGRAM_API_ID || req.headers['x-api-id'];
    const apiHash = process.env.TELEGRAM_API_HASH || req.headers['x-api-hash'];
    const sessionString = process.env.TELEGRAM_SESSION || req.headers['x-session'];
    const phoneNumber = process.env.TELEGRAM_PHONE || req.headers['x-phone'];
    
    if (!apiId || !apiHash) {
      return res.status(400).json({ error: 'Telegram API credentials are required' });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
    const telegramResponse = await fetch('http://localhost:3001/api/telegram/send-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        targetUsername: chatId,
        message: message,
        accountId: accountId,
        apiId: apiId,
        apiHash: apiHash,
        sessionString: sessionString,
        phoneNumber: phoneNumber
      })
    });
    
    const telegramResult = await telegramResponse.json();
    
    if (!telegramResult.success) {
      return res.status(500).json({ error: 'Failed to send message via Telegram' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    const chatMessage = {
      id: Date.now().toString(),
      leadId: leadId,
      message: message,
      timestamp: new Date().toISOString(),
      isFromLead: false, // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å
      chatId: chatId
    };
    
    if (!chatHistory.has(leadId)) {
      chatHistory.set(leadId, []);
    }
    
    chatHistory.get(leadId).push(chatMessage);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets (–ª–∏—Å—Ç "–°–≤—è–∑–∞–ª–∏—Å—å")
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!googleSheetsService.isInitialized()) {
        await googleSheetsService.initialize(null, true); // mock mode
      }
      
      await googleSheetsService.appendToSheet('–°–≤—è–∑–∞–ª–∏—Å—å', [
        [
          leadId,
          leadName || 'Unknown',
          chatId,
          message,
          new Date().toISOString(),
          '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          '–°–≤—è–∑–∞–ª–∏—Å—å'
        ]
      ]);
      
      console.log('‚úÖ Message recorded in Google Sheets');
    } catch (sheetsError) {
      console.error('Error saving message to Google Sheets:', sheetsError);
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ –ª–∏–¥–æ–≤
    try {
      const leadIndex = storedLeads.findIndex(lead => lead.id === leadId);
      if (leadIndex !== -1) {
        storedLeads[leadIndex].contactStatus = '–°–≤—è–∑–∞–ª–∏—Å—å';
        storedLeads[leadIndex].contactDate = new Date().toISOString();
        console.log('‚úÖ Lead status updated to "–°–≤—è–∑–∞–ª–∏—Å—å"');
      }
    } catch (statusError) {
      console.error('Error updating lead status:', statusError);
    }
    
    res.json({
      success: true,
      message: 'Message sent successfully',
      chatMessage: chatMessage
    });
    
  } catch (error) {
    console.error('Error sending message to lead:', error);
    res.status(500).json({ error: 'Failed to send message to lead' });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/test-contact-recording', async (req, res) => {
  try {
    const { leadId, message, leadName, chatId } = req.body;
    
    console.log('üß™ Testing contact recording to Google Sheets...');
    console.log('üìã Data:', { leadId, leadName, chatId, message });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets (–ª–∏—Å—Ç "–°–≤—è–∑–∞–ª–∏—Å—å")
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä googleSheetsService
      if (!googleSheetsService.isInitialized()) {
        console.log('‚ö†Ô∏è GoogleSheetsService not initialized, using mock mode');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ mock —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await googleSheetsService.initialize({
          privateKey: 'MOCK_KEY',
          clientEmail: 'mock@example.com',
          projectId: 'mock_project'
        });
      }
      
      const spreadsheetId = process.env.GOOGLE_SHEETS_ID || 'test_spreadsheet_id';
      
      await googleSheetsService.appendToSheet(
        spreadsheetId,
        '–°–≤—è–∑–∞–ª–∏—Å—å',
        [
          leadId,
          leadName || 'Unknown',
          chatId,
          message,
          new Date().toISOString(),
          '–¢–µ—Å—Ç',
          '–°–≤—è–∑–∞–ª–∏—Å—å'
        ]
      );
      
      console.log('‚úÖ Test message recorded in Google Sheets');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ –ª–∏–¥–æ–≤
      const leadIndex = storedLeads.findIndex(lead => lead.id === leadId);
      if (leadIndex !== -1) {
        storedLeads[leadIndex].contactStatus = '–°–≤—è–∑–∞–ª–∏—Å—å';
        storedLeads[leadIndex].contactDate = new Date().toISOString();
        console.log('‚úÖ Lead status updated to "–°–≤—è–∑–∞–ª–∏—Å—å"');
      }
      
      res.json({
        success: true,
        message: 'Test contact recording successful',
        recorded: true,
        mock: googleSheetsService.isMockMode()
      });
      
    } catch (sheetsError) {
      console.error('‚ùå Error saving test message to Google Sheets:', sheetsError);
      res.status(500).json({ 
        error: 'Failed to record test contact in Google Sheets',
        details: sheetsError.message 
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in test contact recording:', error);
    res.status(500).json({ error: 'Failed to test contact recording' });
  }
});

module.exports = router;
module.exports.getStoredLeads = () => storedLeads;