// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js 18+

async function debugLeadsAnalysis() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch('http://localhost:3002/health');
    if (healthResponse.ok) {
      const health = await healthResponse.json();
      console.log('‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç:', health);
    } else {
      console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI —á–µ—Ä–µ–∑ scanner
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI —á–µ—Ä–µ–∑ scanner...');
    const scannerStatusResponse = await fetch('http://localhost:3002/api/scanner/status');
    if (scannerStatusResponse.ok) {
      const scannerStatus = await scannerStatusResponse.json();
      console.log('üìã –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞:', scannerStatus);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Google Sheets
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Google Sheets...');
    const messagesResponse = await fetch('http://localhost:3002/api/sheets/messages');
    if (messagesResponse.ok) {
      const messages = await messagesResponse.json();
      console.log(`üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
      if (messages.length > 0) {
        console.log('üìã –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          id: messages[0].id,
          channel: messages[0].chatTitle,
          author: messages[0].username || `${messages[0].firstName} ${messages[0].lastName}`,
          message: messages[0].message?.substring(0, 100) + '...',
          timestamp: messages[0].timestamp
        });
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Google Sheets');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥—ã –≤ Google Sheets
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–æ–≤ –≤ Google Sheets...');
    const leadsResponse = await fetch('http://localhost:3002/api/sheets/leads');
    if (leadsResponse.ok) {
      const leads = await leadsResponse.json();
      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: ${leads.length}`);
      if (leads.length > 0) {
        console.log('üìã –ü—Ä–∏–º–µ—Ä –ª–∏–¥–∞:', leads[0]);
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥—ã –∏–∑ Google Sheets');
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–æ–≤...');
    const testMessages = [
      {
        id: 'test1',
        chatTitle: 'Test Channel',
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        message: '–ò—â—É —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ Python, –æ–ø—ã—Ç 3 –≥–æ–¥–∞, –≥–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ',
        timestamp: new Date().toISOString()
      },
      {
        id: 'test2',
        chatTitle: 'Test Channel',
        username: 'testuser2',
        firstName: 'Test2',
        lastName: 'User2',
        message: '–ü—Ä–æ–¥–∞—é –º–∞—à–∏–Ω—É BMW X5, 2020 –≥–æ–¥, –ø—Ä–æ–±–µ–≥ 50000 –∫–º',
        timestamp: new Date().toISOString()
      }
    ];

    const analyzeResponse = await fetch('http://localhost:3002/api/leads/analyze', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: testMessages,
        openrouterApiKey: 'test-key-for-debug',
        criteria: '–ò—â–µ–º –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É –≤ IT —Å—Ñ–µ—Ä–µ'
      })
    });

    if (analyzeResponse.ok) {
      const result = await analyzeResponse.json();
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:');
      console.log(`  - –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: ${result.leads?.length || 0}`);
      if (result.leads && result.leads.length > 0) {
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:', result.leads);
      }
    } else {
      const errorText = await analyzeResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', errorText);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

debugLeadsAnalysis();