// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js 18+ –∏–ª–∏ fallback –Ω–∞ node-fetch
let fetch;
try {
  fetch = globalThis.fetch;
  if (!fetch) {
    fetch = require('node-fetch');
  }
} catch (e) {
  // –ï—Å–ª–∏ node-fetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch
  fetch = globalThis.fetch;
}

const API_BASE = 'http://localhost:3002/api';

async function debugLeadsSaving() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–æ–≤ –≤ Google Sheets...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞...');
    const backendResponse = await fetch(`${API_BASE}/leads/status`);
    if (backendResponse.ok) {
      const backendStatus = await backendResponse.json();
      console.log('‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω:', backendStatus);
    } else {
      console.log('‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Sheets
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Google Sheets...');
    const sheetsResponse = await fetch(`${API_BASE}/sheets/status`);
    if (sheetsResponse.ok) {
      const sheetsStatus = await sheetsResponse.json();
      console.log('‚úÖ Google Sheets —Å—Ç–∞—Ç—É—Å:', sheetsStatus);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Google Sheets');
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–¥—ã
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–¥–æ–≤...');
    const leadsResponse = await fetch(`${API_BASE}/leads`);
    if (leadsResponse.ok) {
      const leadsData = await leadsResponse.json();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${leadsData.leads.length} –ª–∏–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ`);
      
      if (leadsData.leads.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–π –ª–∏–¥:', {
          id: leadsData.leads[0].id,
          name: leadsData.leads[0].name,
          username: leadsData.leads[0].username,
          channel: leadsData.leads[0].channel,
          confidence: leadsData.leads[0].confidence
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤');
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    const testMessages = [
      {
        id: 'test-msg-1',
        text: '–ò—â—É –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å React –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –û–ø–ª–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è.',
        author: 'test_user_1',
        timestamp: new Date().toISOString(),
        chatId: 'test_chat',
        chatTitle: '–†–∞–±–æ—Ç–∞ IT'
      },
      {
        id: 'test-msg-2', 
        text: '–ù—É–∂–µ–Ω –º–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ Flutter. –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 100–∫.',
        author: 'test_user_2',
        timestamp: new Date().toISOString(),
        chatId: 'test_chat',
        chatTitle: '–†–∞–±–æ—Ç–∞ IT'
      }
    ];

    const testCriteria = [
      '–ò—â—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–µ–±, –º–æ–±–∏–ª—å–Ω—ã–µ, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –±—ç–∫–µ–Ω–¥)',
      '–í–∞–∫–∞–Ω—Å–∏–∏ –≤ IT —Å—Ñ–µ—Ä–µ',
      '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º'
    ];

    const analysisResponse = await fetch(`${API_BASE}/leads/analyze`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messages: testMessages,
        criteria: testCriteria,
        apiKey: 'test_key', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
        spreadsheetId: 'test_spreadsheet_id'
      })
    });

    if (analysisResponse.ok) {
      const analysisResult = await analysisResponse.json();
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: ${analysisResult.leads.length}`);
      
      if (analysisResult.leads.length > 0) {
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:');
        analysisResult.leads.forEach((lead, index) => {
          console.log(`  ${index + 1}. ${lead.name} (@${lead.username}) - ${lead.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏`);
          console.log(`     –ü—Ä–∏—á–∏–Ω–∞: ${lead.reason}`);
        });
      }
    } else {
      const errorText = await analysisResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', errorText);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets...');
    const testLead = {
      timestamp: new Date().toISOString(),
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –õ–∏–¥',
      username: 'test_lead',
      channel: 'test_channel',
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
      reason: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞',
      confidence: 85,
      sent: false
    };

    const saveResponse = await fetch(`${API_BASE}/sheets/append-leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        leads: [testLead],
        spreadsheetId: 'test_spreadsheet_id',
        sheetName: '–õ–∏–¥—ã'
      })
    });

    if (saveResponse.ok) {
      const saveResult = await saveResponse.json();
      console.log('‚úÖ –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets —É—Å–ø–µ—à–Ω–æ:', saveResult);
    } else {
      const errorText = await saveResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', errorText);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –∏–∑ Google Sheets
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ Google Sheets...');
    const readResponse = await fetch(`${API_BASE}/sheets/leads/test_spreadsheet_id`);
    if (readResponse.ok) {
      const readResult = await readResponse.json();
      console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ Google Sheets:', readResult);
    } else {
      const errorText = await readResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Google Sheets:', errorText);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugLeadsSaving().then(() => {
  console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});