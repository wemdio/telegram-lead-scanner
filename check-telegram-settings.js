const fs = require('fs');
const path = require('path');

async function checkTelegramSettings() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API...\n');

  const frontendUrl = 'http://localhost:5173';
  const backendUrl = 'http://localhost:3001';

  // 1. Check Telegram settings on frontend
  console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (–ø–æ—Ä—Ç 5173):');
  try {
    const frontendResponse = await fetch(`${frontendUrl}/api/settings/telegram`);
    if (frontendResponse.ok) {
      const frontendData = await frontendResponse.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
        success: frontendData.success,
        hasTelegramApiId: !!frontendData.telegramApiId,
        hasTelegramApiHash: !!frontendData.telegramApiHash,
        hasTelegramBotToken: !!frontendData.telegramBotToken,
        hasTelegramChannelId: !!frontendData.telegramChannelId
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', frontendResponse.status);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É:', error.message);
  }

  // 2. Check Telegram settings on backend
  console.log('\nüìã 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–ø–æ—Ä—Ç 3001):');
  try {
    const backendResponse = await fetch(`${backendUrl}/api/settings/telegram`);
    if (backendResponse.ok) {
      const backendData = await backendResponse.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
        success: backendData.success,
        hasTelegramApiId: !!backendData.telegramApiId,
        hasTelegramApiHash: !!backendData.telegramApiHash,
        hasTelegramBotToken: !!backendData.telegramBotToken,
        hasTelegramChannelId: !!backendData.telegramChannelId
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –±—ç–∫–µ–Ω–¥–∞:', backendResponse.status);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É:', error.message);
  }

  // 3. Check Telegram client status
  console.log('\nüìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Telegram –∫–ª–∏–µ–Ω—Ç–∞:');
  try {
    const statusResponse = await fetch(`${backendUrl}/api/telegram/status`);
    if (statusResponse.ok) {
      const statusData = await statusResponse.json();
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å Telegram –∫–ª–∏–µ–Ω—Ç–∞:', statusData);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:', statusResponse.status);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
  }

  // 4. Check environment variables
  console.log('\nüìã 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  const envVars = [
    'TELEGRAM_API_ID',
    'TELEGRAM_API_HASH',
    'TELEGRAM_SESSION_STRING',
    'TELEGRAM_BOT_TOKEN'
  ];

  envVars.forEach(varName => {
    const value = process.env[varName];
    console.log(`${varName}: ${value ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  });

  // 5. Check .env files
  console.log('\nüìã 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  const envFiles = [
    path.join(__dirname, '.env'),
    path.join(__dirname, '.env.local'),
    path.join(__dirname, '.env.production'),
    path.join(__dirname, 'backend', '.env'),
    path.join(__dirname, 'backend', '.env.local'),
    path.join(__dirname, 'backend', '.env.production')
  ];

  envFiles.forEach(filePath => {
    const fileName = path.basename(filePath);
    const dirName = path.basename(path.dirname(filePath));
    const exists = fs.existsSync(filePath);
    
    if (exists) {
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        const hasTelegramSettings = content.includes('TELEGRAM_API_ID') || 
                                   content.includes('TELEGRAM_API_HASH') ||
                                   content.includes('TELEGRAM_BOT_TOKEN');
        console.log(`${dirName}/${fileName}: ‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ${hasTelegramSettings ? '(—Å–æ–¥–µ—Ä–∂–∏—Ç Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)' : '(–±–µ–∑ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫)'}`);
      } catch (error) {
        console.log(`${dirName}/${fileName}: ‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)`);
      }
    } else {
      console.log(`${dirName}/${fileName}: ‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  });

  // 6. Test Telegram connection
  console.log('\nüìã 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram:');
  try {
    const testResponse = await fetch(`${backendUrl}/api/telegram/check-connection`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (testResponse.ok) {
      const testData = await testResponse.json();
      console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', testData);
    } else {
      const errorData = await testResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', errorData);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
}

checkTelegramSettings().catch(console.error);